Notes for acloud.guru AWS Solution Architect Associate training







Availability Zone == Data Center, can have multiple DCs in an AZ

Region: geographical area, each Region consists of 2 or more AZ.

Edge Location: endpoints for AWS which is used to cache content i.e. CloudFront (CDN)


Main course topics: compute, storage, databases, network, content delivery, security, IAM, compliance


## Identity and Access Management / S3

IAM: manage users and level of access to AWS Console



IAM Features: 
    - Centralized controle of AWS Account
    - Shared access to your AWS Account
    - Granular perms
    - Identity Federation (including Active Directory, Facebook, LinkedIn)
    - Multifactor Authentication
    - Provide temproary access for users / devices / services
    - Password rotation policy
    - Integrates with AWS services
    - Supports PCI DSS Compliance


Key IAM Aspects: 
    Users:    end users sucha as people, employees etc
    Groups:   collection of users, each user in the group will inherit the permissions of the group
    Policies: policies made up of policy documents (JSON that gives perms to what a User, Group, or Role is able to do)
    Roles :   create roles and assign to resources



## IAM LAB

> Console > Search > IAM
Upper right shows login console: 

https://iamwhatiam.signin.aws.amazon.com/console

NOTE:  I changed it to knotknull for the alias:
https://knotknull.signin.aws.amazon.com/console


Root Account:  Account that created the AWS account == "God Mode"

Policies > choose a police (i.e. Administrator Access), click on "+" for JSON: 
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": "*",
            "Resource": "*"
        }
    ]
}

- IAM is universal, does not apply to regions
- root account has full Admin Access
- new user has not access, can add console and programtic access

# billing alarm
CloudWatch > Alarms > Billing > Create Alarm


 - Create SNS topics
 - add email (confirm)

subscription to topic: 
 arn:aws:sns:us-east-1:709596356054:aws_billing_alarm:368bbef4-b4e2-4f70-b103-ab42cfb544d6


Take away:  use CloudWatch to create a billing alarm via SNS topic


## S3 

Simple Storage Service 
- object storage
    - key (name) / value (data)
    - version ID
    - metadata
    - ACLs
    - toreents

- data spread across multiple devices / facilities
- size: 0 bytes to 5TB files **
- unlimited storage
- files stored in buckets (think folder)
- universal namespace: must be globally unique
- successful upload:  HTTP 200 code
NOTE: not suitable for installing an OS on 


# S3 Consistency:
    - Read after Write for PUTS of new objects
    - Eventural Consistency for overwrite PUTS and DELETES (propogates)
        - could get older version or deleted file


# S3 Versioning: 
    Can version buckets and suspend versioning:
    - versioning give a version to each new put a key
    - suspending versioning makes the version id null 
        - if there versions without a null version id they will remain
        - putting a new entry with a key that has a null will overwrite the null key version
    - MFA Delete
    - Encryption

# S3 Guarantees:
    - 99.9% Availability **
    - 99.9999999999% Durability **    (11 9's )


# S3 Storage Classes

- S3 Standard
    - 99.99 Availability / 99.9999999 durability
        - stored redundantly across multiple devices / multiple facilities 
            - sustain loss of 2 facilities concurrently

- S3 IA (infreqeuently accessed)
    - less frequent access
    - requires rapid access when needed
    - lower fee than S3, charged retrieval fee


- S3 One Zone - IA (infreqeuently accessed)
    - low cost IA
    - don't require multiple AZs resiliency
NOTE: was known as RRS (Reduced Redundancy Storage)


- S3 Intelligent Tiering
    - optimize costs by automatically moving data to most cost effective access tier,
        - no performance impact / no operational overhead

- S3 Glacier
    - low cost storage for data archiving
        - retrieval time from minutes to hours

- S3 Deep Archive
    - lowest cost storage 
        - retrieval time 12 hours



**          S3 Standard     S3 Intelligent-Tiering      S3-IA       S3-One Zone IA      S3 Glacier      S3 Deep Archive
durability      11 9s               11 9s               11 9s           11 9s               11 9s               11 9s
availability    99.99               99.99               99.99           99.95               N/A                  N/A 
SLA             99.99               99                  99              99                  N/A                  N/A 
AZ zones         >=3                >=3                 >=3              1                  N/A                  N/A                   
Min Charge       N/A                N/A                128 kb          128 kb               40 kb                40 kb            
Min Duratio     N/A                30 days            30 days         30 days              90 days              180 days
Retrieval Fee   N/A                 N/A               per GB          per GB               per GB               per GB
1st byte latency  ms                 ms                 ms                ms               min - hr             hours


S3 Charges: 
- storage
- requests
- management priceing (tiers)
- data transfer
- transfer acceleration
    - use CloudFront to speed up bucket transfers
- cross region replication



Buckets viewed globally but can be housed regionally

Access:   **
    - Bucket Policies: applies across the entire bucket
    - Object Policies: applies to individual files
    - IAM policies to Users and groups: applies to users / groups


# S3 pricing
    - storage
    - requests / data retrieval
    - data transfer
    - mgmt & replication

S3 and S3 Intelligent Tiering is same for frequent access, less for IA tier
cost hierarchy: 
    S3 Std > S3 IA > S3 IA > S3 One Zone IA > Glacier > Glacier Deep Archive  **


# S3 Security / Encryption

    - Bucket Policies
    - ACL (to object)

S3 buckets can be configured to create access logs make to bucket.

Encryption in Transit 
    - SSL / TLS (https)

Encryption at Rest 
 - Server Side
    - S3 Managed Keys - SSE-S3: Amazon manages keys
    - AWS Key Management Service, Managed Keys - SSE-KMS: manage keys with AWS Key Management Service
    - Server Side Encryption w/ Customer Provided Keys:  SSE-C
    - NEW: Dual-Layer server-side encryption with AWS KMS Service Keys (DSSE-KMS)

 - Client Side Encryption
    - customer encrypts and uploads

Can encrypt individual objects and at bucket level.


# S3 Versioning 
    - stores all versions of an object (soft delete)
    - once enabled, CANNOT DISABLE, only suspend  **
    - lifecycle rules
    - MFA Delete


Note: latest version is available (can be made public)
      - lower versions not made available/public unless specifically made so
      DELETING the DELETE MARKER makes most recent version available  **

# S3 Lifecycle Rules
    - Automates moving objects between storage tiers 
        - can be used w/ versioning 
        - current and prior versions
buckets > bucket > management > lifecycle configuration > create rule 

# S3 Object Lock & Glacier Vault Lock
    Object Lock: write once, ream many (WORM)
        - prevent object from being deleted / modified for fixed amount of time or indefinitely 

        - Governance Mode: users can't overwrite or delete and object version or alter lock settings  **
                - special perms needed

        - Compliance Mode: protected object version can't be overwritten or deleted by ANY USER (including root user)  **
            - ensures object version can't be overwritten or deleted for the duration of the retention period (i.e. 7 Years)

        retention period: protects object version for fixed amount of time  
            - timestamp of expiration kep in version metadata

        - Legal Hold: prevents an object version from being overwritten or deleted
                - does not have a retention period.  In place until removed
                - can be applied / removed with s3:PutObjectLegalHold perm

    Glacier Vault Lock: deploy and enforce compliance controls for individual S3 Glacier Vaults 
            with Vault Lock Policy. 
                - specify controls in a Vault Lock Policy
                    - policy locked from future edits
- Object Lock == WORM
- Object Lock applied to objects or bucket
- governance mode and compliance mode
- Glacier Vault Lock = compliance controls for Glacier Vaults
    - Vault Lock policy locked for edits



# S3 Performance
    S3 Prefix:   between bucket name and object name 
        i.e.  /bucketname/folder1/subfolder2/xyz.txt  >> Prefix = /folder1/subfolder2


S3 latency:  1st byte within 100 - 200 ms

Throughput Requests can achieve: 
    - 3500 PUT / COPY / POST / DELETE   per PREFIX  **
    - 5500 GET/HEAD requests per second per PREFIX  **


NOTE: can get better performance by spreading reads across different prefixes i.e.:
    - 2 prefixes (/folder1/subfolder2) 11,000 requests / sec
    - 4 prefixes (/folder1/subfolder2/dir1/dir2 ) 22,000 requests / sec

MORE PREFIXES == BETTER PERFORMANCE !!  **

SSE-KMS Quotas: 

 - KMS Request rates: 
    - SSE-KMS has KMS limits 
        - upload   file:  GenerateDataKey in KMS API
        - download file:  Decrypt in KMS API

KMS Quota is region specific **
    - 5500 or 10k or 30k requests per second  **

NOTE: CANNOT REQUEST QUOTA INCREASE FOR KMS 


Uploads

    Multi-part uploads:
        - recommended for files over 100 MB  **
        - required for files over  5 GB   

Downloads:
    S3 Byte-Range fetches: 
        - parallelize downloads by specifying byte ranges
        - can speed up downloads
        - download partial file

# S3 Select & Glacier Select
    S3 Select:  retrieve subtset of data from object using simple SQL expressions
        - retrieve only data you need
            - performance increase 
                - up to 400% faster  ** 
                - up to 80% cheaper

    Glacier Select:  Similar to S3 Select but run against Glacier

# AWS Organizations and Consolidated billing

AWS Organizations: account management service that enables you to consolidate multiple AWS accounts 
    into an organization to centally manage. 
    Accounts under organization unit under ROOT  with policies at the OU and account
OU = Organizational Unit

{Organization}
---------------
[Policy]    [ROOT]          
      |   /        \   +---[Policy]              [Policy]
     [OU]           \  |                            /
    /    \           [OU]----------------------+   /       
[Account]  \           |                       |  /
             [OU]    [Account]                [OU]---------+
           /      \                          / |           |
     [Account]    [Account]         [Account] [Account] [Account]      

Consolidated Billing: 
    - Paying account (cannot access sub resources) linked to AWS accounts


                        +------[Test/Dev]
                        |
    [Paying Account] ---+------[Production]
                        |
                        +------[Back Office]

Consolidates usage for volume discounts

- Root Account should always have MFA
- Paying account should be for billing only 
    - do no deploy resources to paying account
- Service Control Policies on OU or individual account  **
    - enable / disable AWS Services


# Share S3 Buckets Across Accounts
    - 3 ways to share S3 Buckets across acounts  **
        1. Bucket Policies and IAM
            - across the entire bucket
            - programatic access only
        2. Bucket ACLs and IAM 
            - individual objects
            - programatic access only
        3. Cross-account IAM Roles
            - programatic access 
            - console access 

IAM > Roles > Create Role
    - Another AWS Account
    - Attach permission policies to role
        i.e. AmazonS3FullAccess
    - Role Name > Create Role

NOTE:  Give this link to users who can switch roles in the console   **
    user logs in an clicks "Switch Role" under id or use link


# Bucket replication
S3 > buckets > bucket > Replication Rule > Create Replication Rule

NOTE: Source and replicated buckets need to be versioned !! **
    - Detele markers are not replicated 
    - Permissions on source bucket will replicate across regions

# S3 Transfer Acceleration
    - utilizes CloudFront Edge Network to accelerate uploads
        - use distinct URL to upload to edge location which is then transfered to S3


# DataSync
    - move large amounts of data to AWS
    - AWS DataSync Agent  (on prem)
    - locally connects to NAS or SMB filesystem
        - copy to AWS 
        - write from AWS 
    - Connects to AWS Services: 
        - S3
        - EFS
        - FSx for Windows File Server
    - Hourly, daily or weekly
NOTE: can replicate EFS to EFS 


# CloudFront
 - Content Delivery Network
    - pushes contact to local Points of Presence
    - Edge Location:  where content is cached
        - Can Read and Write to Edge Locations
    - Origin       :  Origin of all files distributed via ECN
        - bucket
        - ec2 instance 
        - ELB
        - Route 53
    - Distributon  :  Name of the CDN
        - collection of Edge Locations

    - Can deliver:
        - Static
        - Dynamic
        - Streaming
        - Interactive content

    - Objects cached for the TTL (Time To Live) 

    Web Distribution:  Used for websites
    RTMP :  Media Streaming

NOTE: Can clear cached objects, will be charged


Can restrict access via signed URLs or signed cookies

Domain Name created for Cached Content
i.e. https://d16s698dkl8k6u.cloudfront.net

https://d16s698dkl8k6u.cloudfront.net/README.txt

NOTE:  can invalidate the Distribution:  CloudFront > Distributions > Invalidations


# CloudFront Signed URLs and Cookies

    - Signed URLs  :  1 file   = 1 URL
    - Signed Cookie:  1 cookie = multiple files


Attach policy to 
    - URL Expiration
    - IP Ranges
    - Trusted Signers (which AWS accounts can create signed URLS)


Origin Access Identity (OAI):  
    - users access CloudFront which then access S3 bucket via OAI 


CloudFront SDK generates Signed URL

    - key pari of Signed URL is account wide (managed by ROOT)

S3 Signed URL 
    - request as IAM user who creates presigned URL 
    - limited lifetime

Origin is EC2 use CloudFront
Origin is S3  use S3 Signed URL


# Snowball
    - Petabyte scale data transport solutions 
    - import / export to S3
    - secure appliances to transfer large amounts of data into / out of AWS
        - addresses high network costs
        - long transfer times
        - security
        - 1/5th cost of high speed Internet

50TB / 80TB
    - 256 bit encryption
    - Trusted Platform Module
    - Once transferred, AWS wipes

Snowball Edge 
    - 100TB onboard storage and compute
    - can use lambda functions
    - applications can run when can't access cloud
    - portable AWS

Snowmobile 
    - Exabyte-scale data transfer
    - 100 PB per Snowmobile (45ft trailer)



# Storage Gateway
    - services that connects on prem software appliance with cloud storage.
    - secure integration between onprem and AWS storage
    - can be software or physical device
    - download as virtual machine
        - VMWare ESXi
        - Microsoft Hyper-V

3 Types: 
    File Gateway  :  NFS & SMB     (files)
        - files stored as S3 objects 
        - access ad NFS mount
        - perms / timestampes are S3 metadata

    Volume Gateway:                 (drive images)
        - iSCSI
        - stored volumes
            - store primary data locally 
            - async backups to AWS
            - backup to S3 as EBS snapshots  (1GB - 16 TB)  **
        - cached volumes
        - asynchronouse backup as point-in-time snapshots (deltas)
        - stored as EBS snapshots

        - cached volumes
            - use S3 as primary data storage
            - frequently accessed data is stored locally
                - caches frequently used data
            - upto 32 TB volumes and attach as iSCSI
                - 1GB to 32 TB

    Gateway Virtual Tape Library  :
        - VTL (Virtual Tape Library)
        - media changer and tape drives preconfigured
        - backup applicatons can use
        - virtual tapes to S3

# Athena vs Macie

Athena:
    - Query S3 data with standard SQL
    - Serverless
    - Pay per query / per TB scanned
    - query log files
    - reports off of S3
    - query clickstream data

Macie:
    - Security services that uses ML / NLP to discover sensitive data in S3 
    - Uses AI to check if S3 has senstivie data, PII
    - dashoboard, reports, alerts
    - analyze CloudTrail logs
    - PCI-DSS use case / prevent ID theft

S3 & IAM Summary

IAM: 
    - Users
    - Groups
    - Roles
    - Policies
    - Universal, not region specific
    - Root Account has Admin
    - New Users 
        - have NO permissions
        - Assigned Access Key and Secret Access Keys  (view once)

S3:
    - Object based
    - 0 Bytes to 5 TB
    - Universal name space, globally unique
    - HTTP 200: upload successful
    - Bucket Policies: across all objects in Bucket
    - ACL: individual objects (files)
    - Can be setup to generate access logs
    - Attributes: 
        - Key
        - Value
        - Verison ID
        - Metadata
        - Subresources:
            - ACL / torrents
    - Consistency: 
        - Read after Write for PUTS new Objects
        - Eventual consistency for overwrite PUTS / Deletes
    S3 Standard    
    - Availability 
        - 99.99   (4 9's)
    - Durability:  
        - 99.999999999 (11 9's)
    S3 IA: Infrequently Accessed / less frequent / rapid access
    S3 IA One Zone:  just 1 AZ
    S3 Intelligent Tiering :  Mchine learning to migrate data to cost-effective tier
            - no performance impact or operational overhead
    S3 Glacier:  Low cost data archival / retrieval minutes to hours
    S3 Glacier Deep Archive: Archival, retrieval up to 12 hours
        - lowest cost storage class

    Cost hierarchy: 
        - S3 Std
        - S3 IA
        - S3 Intelligent Tiering
        - S3 One Zone - IA     NOTE: can lose your data
        - S3 Glacier
        - S3 Glacier Deep Archive

    Encryption In Transit: 
        - SSL / TLS


    Encryption At Rest: 
        - SSE - S3  Server Side Encryption
        - SSE - KMS utilizing Key Management Service
        - SSE - C: Customer Proided Keys 
        - Client Side Encryption

    Organization: 
        - bucket from one account to another
        - Server Control Policies:
            - on Organization Unit (OU) 
            - individual accts


    Share S3 Buckets across accounts
        - Bucket Policy & IAM
            - entire bucket
            - programmatic only
        - ACLs & IAM
            - individual objects
            - programmatic only
        - Cross Acount Roles 
            - programmatic 
            - console


Cross Region Replication 
    - Versioning MUST BE ON at source and target
    - existing files not replicated automatically
    - DELETE MARKERS ARE NOT REPLICATED
    - Delete individual versions will not be replicated

Lifecycle Policies:
    - Automate moving objects to different storage tiers
    - Can be used with versioning

S3 Transfer Acceleration
    - utilizes CDN 

CloudFront: 
    - CDN
    - Edge Location: location where content is cached
    - Origin:  origin of all content
        - S3, EC2, ELB, Route53
    - Distribution:  Name of CDN
    Types:
        - Web Distribution: web content
        - RTMP: Media Streaming
    Edge Locations can be read / write
    Objects cached for TTL

Snowball:
    - Disk appliance to move data in /out of S3
    - import to S3
    - export from S3


Storage Gateway:  agent installed on prem
    File Gateway  : flat files stored on S3

    Volume Gateway: iSCSI / disk volumes
        Stored Volumes: entire dataset stored on site and is asyn backed up to S3
        Cached Volumes: entire dataset on S3 and more frequently accessed is cached locally 

    Gateway Virtua Tape Library: backup to S3


Athena: 
    - query S3 using SQL
    - serverless
    - analyse log data in S3


Macie: 
    - uses ML / NLP / AI to idetnify PII in S3
    - analyze CloudTrail logs
    - dashboard, reports, alerts
    - PCI-DSS compliance


A Deny in a policy will override an Allow that user may have



## EC2 
- Elastic Cloud Compute: Virtual Machines in Cloud
     pricing:
        - on demand: fixed rate by the hour with no commitment

        - reserved : capacity reservation ata a discount on hourly charge (1 to 3 year terms)
                        - Standard Reserved: up to 75% off on demand
                        - Convertible Reserved: up to 54% on demand 
                                - can change instance types as long as instance is equal or greater value
                        - Scheduled Reserved: up to 54% on demand 
                                - time window of reservation
                                - match capacity to a recurring schedule

        - spot     : bid what you will pay for insance capacity
                        can lose instance at any time 

        - dedicated host: physical EC2 server dedicated for your use.
            - regulatory that does not allow multi-tenant virtualization
            - licensing the does not support cloud deployments
            - can be purchased on-demand (hourly)
            - purchased as reservation up to 70% off

EC2 Intances Mnemonic:  Fight Dr. McPixiez AU
F - FPGA
I - IOPS 
G - Graphics
H - High Thruoughput disk
T - T2 Micro (check general purpose)
D - Density
R - RAM
M - Main choice for general purpose apps
C - Compute
P - Graphics (think Pics)
X - Extreme Memory
Z - Extreme Memory and CPU
A - Arm-based workloads
U - Uhh Bare Metal


security group is a "virtual firewall"

Termination Protection turned off by default 

Root EBS volume will be default deleted when instance terminated
    - Root valume can be encrypted


# Security Groups

- firewall for a resource 
    - change to a security group rule takes place immediately
    NOTE: security groups are STATEFULL 
            - creating an inbound rule will allow for the corresponding outbound rule 
                i.e. HTTP / 80 IN will automatically allow HTTP / 80 OUT 

NOTE:  You can't block a particular port or IP address in a security group, can only do that with NACLs
       Security groups block everything by DEFAULT.

       NACLs are STATELESS, need to create both inbound and outbound rule

- can attach more than one security group to an EC2 instance

- All Inbound  traffic BLOCKED by default
- All Outbound traffic ALLOWED by default
- Security Groups are STATEFUL 
    - those allowed IN are also allowed OUT
- Cannot block specific ports or IP addresses using Security Groups
    - use Network Access Control Lists (NACLs)

- Can have any number of EC2 instances in a security group
- Can have multiple security groups attached to an EC2 instances 
- Can only specify "ALLOW" rules in a Security Group 
    - default of a SECURITY GROUP is to "DENY" everything


# EBS

- Elastic Block Store 
    - persistent block storage volumes for EC2 instances
        - virtual hard disk in cloud
    - automatically replicated within its Availability Zone

5 Types of EBS Storage:
    - General Purpose (SSD)
    - Provisioned IOPS (SSD)
    - Throughput Optimised Hard Disk Drive  (Physical Magnetic drive)
    - Cold Hard Disk Drive
    - Magnetic


             |---------------Solid State DrivesSSD ------------|----------------- Hard Disk Drives HDD --------------------|
Volume Type  |        General                 Provisioned      |  Throughput              Cold                  EBS        |
             |        Purpose SSD             IOPS SSD         |  Optimized SSD           HDD                   Magnetic   |
             |                                                 |                                                           |
Desc         |        general purpose          Highest         | Low Cost HDD             Low Cost HDD          previous   | 
             |balances price / performance     Performance SSD | freq access,             less freq             generation | 
             |wide variety of transactions     mission critical| thruput intensive        accessed workloads    HDD        |
             |                                                 |                                                           |
             |                                                 |                                                           |
Use Cases    |  most work loads               Databases        | Big Data &               File Servers        Infreq access|
             |                                                 | Datawarehouses                                workloads   |    
             |                                                 |                                                           |
API Name     |         gp2                       io1           |     st1                    sc1                 standard   | 
             |                                                 |                                                           |
Volume Size  |      1 GB - 16 TB              4 GB - 16 TB     | 500 GB - 16 TB           500 GB - 16 TB       1GB - 1 TB  |
             |                                                 |                                                           |
Max IOPS /   |        16,000                    64,000         |     500                      250               40 - 200   |
Volume       |---------------Solid State DrivesSSD ------------|----------------- Hard Disk Drives HDD --------------------|





# EBS Volumes and Snapshots

- EBS and EC2 instances are in the same AZ

- root EBS volumes destroyed when instance is destroyed
    - attached non-root volumes persist when instance terminated

- can change size of drive on the fly (have to extend file system to get the additional storage)

- can change the volume type (ex. gp3 to iop) on the fly

Exam question:  how to move volume and ec2 instance to another AZ
    > volumes > select volume > create snapshot

    > created snapshot > create image
        NOTE: set Virtualization Type as "Hardware-assisted virtualization"
             Allows for greater selection of EC2 instance types

Once image is created:
    > AMIs > select created image >  Launch > choose new AZ to spin up into

NOTE: 
    AMI > copy AMI to a different region

Snapshots exist on S3
Snapshots are point in time copy of volumes
Snapshots are incremental 
    - only blocks that have changes since last snapshot are moved to S3

Can create AMIs from snapshots


# AMI Types (EBS vs Instance Store)

AMI factors: 
    - Region
    - OS
    - Architecture (32-bit or 64-bit)
    - Launch Perms
    - Storage for Root Device (Root Dev Vol)

    - Instance Store (Ephemeral Storage)
        - root device is instance store volume created from template stored in S3
        NOTE: instance store restricts type of instance types
                can only reboot or terminate in instance store ec2 instance 
                CANNOT STOP instance store e2c instance 
                If you stop instance store you will lose all data on that instance (EPHEMERAL storage)

    - EBS Backed Volumes
        - root device created from an EBS snapshot
        - EBS instance can be stopped without losing data
    
    Can reboot both Instance Store and EBS Backed Volumes wihout losing data

    Can keep EBS volume after termination, Instance Store loses all data

ENI vs ENA vs EFA 

ENI - Elastic Network Interface
     virtual network card 

EN  - Enhanced Networking  / Enhanced Networking Adapter
    Single root I/O virtualization  (SR-IOV)
    high performance netwoking on supported instance types 
    NOTE:  ENA is a subset of Enhanced Netowrking

EFA - Elastic Fabric  Adapter
    network device than can attached to EC2 instance to accelerate 
    High Performance Computing (HPC) and Machine Learning apps


ENI: virtual network card 
    - primary private IPv4 address from IPv4 address range
    - One or more secondare private IPv4 address from IPv4 address range
    - One Elastic IP address (IPv4) per private IPv4 address 
    - One public IPv4 address
    - One or more IPv6 addresses
    - One or more security groups
    - One MAC address
    - source / destination check flag
    - description

    - create a management network (separate traffice)
    - use network and security applianced in VPC
    - dual-homed instances with workloads / roles on distinct subnets
    - low budget, high availability solution


EN: Enahcned Networking 
    - single root I/O virtualization (SR-IOV)
        SR-IOV device virtualization provides hight I/O and lower CPU utilization 
         compared to traditional virtualized network interfaces

    - higher bandwidth, higher packet per second (PPS) performance, 
      lower inter-instance latencies.  
      NOTE: No additional changed for using enhanced networking
      user for good networking performance

    Depending on Instance type, enhanced networking enabled by: 

    Enhanced Network Adapter (ENA)  up to 100Gbps
    or
    Intel 82599 Virtual Function (VF) interface, supports up to 10 Gbps
     (older instances)


EFA: Elastic Frabric Adapter
    network device attach to EC2 instance to accelerate HPC and ML
    provides lower and more consistent latency and higher thruput than TCP transport
    EFA can us OS-bypass.  
        Allows apps to bypass OS kernel and communicate directly with EFA device
            (only Linux)


Encrypted Root Device Volumes & Snapshots

How to create an encrypted image from unencrypted volume

bring up ec2 instance > volumes > create snapshot:  my_unencrypted_snap 

snapshots > copy my_unencrypted_snap > 
    - check Encrypt this snapshot 
    - default key
        > my_encrypted_snap


snapshots > select  my_encrypted_snap  > create image > my_encrypted_image

AMI > select my_encrypted_image > Launch Instance

NOTE:  
- Snapshots of encrypted volumes are encrypted automatically
- Volumes restored from encrypted snapshots are encrypted automatically
- Can share snapshots but only if they are unencrypted
- snapshots can be shared with other AWS accounts / made public
- Can NOW encrypt root device volumes upon creation of EC2 instance **


# Spot Instaces & Spot Fleets

Spot instance: 
 - take advantage of unused ec2 capacity with up to 90% discount of on-demand
     - can be used for stateless, fault-tolerage, flexible apps
       - containerized workloads
       - CI/CD, web servers, etc
       - image / rendering
       - HPC
       - analytics
    NOT GOOD FOR: 
       - persistent workloads
       - critical jobs
       - databases

 - decide on maximum spot price
    - instance provisioned as long as spot price is below your maximum spot price

 - hourly spot price varies hourly 

 - if spot price goes above your maximum, have 2 minutes to choose whether 
    to stop or terminate your instance

 - Spot block, stop spot instances from being terminated even if the spot price is 
    over your max spot price.   Spot Blocks only for 1 to 6 hours **



Spot Instance Termination 


                                                     +------below spot price ----> request failed
                                                     |
create requet -> [ Spot Request ]   -----------------+        +--------- stop ------+  
                   - max price                       |        v       (persistent)  |
                                                     |      start                   |
                   - # of instances                  |   (persistent)  interrupt <--+
                   - launch specification            |        |        (persistent) |
                   - request type:                   |        v                     |
                        - one time                   +------Launch instance --------+  
                        - persistent                                                |
                   - valid from / to                                            Interrupt
                                                                                (one-time)

NOTE:  if the request is one-time
             then once the price crosses it is terminated
       if the request is persistent
            then once the price crosses it is stopped
            if price comes back down the instance is started again
               until it is interrupted


Spot Fleet
    - collection of spot instances 
        and on-demand instance

    - spot fleet attempts to launch the number of spot instances and 
       on demand instances to satisfy the spot fleet target capacity 
                spot instances + on demand instances == spot fleet target capacity

    - tries to match target capacity with price restraint

    - setup different launc pools 
        - define: instance type, OS, AZ
        - Can have multiple pools
            - fleet will determine best way to implement strategy
        - spot fleets will stop launching instances once you reach price threshold 
            capacity desire state

Spot Fleet Strategies:
    - capacityOptimized
        spot instances come from pool with optimal capcity         
        for the number of instances launching

    - lowestPrice
        spot instances come from pool with lowest price

    - diversified
        spot instances are distributed across all pools

    - InstancePoosToUseCount
        spot instances are distributed across the number of 
        spot instance pools specified.  Only valid with lowestPrice
            like diversified + lowestPrice


# EC2 Hibernate
 - OS told to perform hibernation (suspend-to-disk)
 - saves contents from RAM to EBS root volume
 - root volume and attached EBS volumes are persisted

starting out of hibernation:
    - root volume restored to previous state
    - RAM contents are reloaded
    - processes previously running are resumed
    - previously attached data volumes are reattached 
       instance retains its instance ID
    - boots instance faster
        - don't have to restart OS or Apps

good for:
    - long running processes
    - services that take a long time to initialize


NOTE:   Instance RAM must be less than 150 GB in size.    **
        Instance Families:  C3, C4, C5, M3, M4, M5, R3, R4, R5
        Available for: Windows, Amazon Linux 2 AMI, Ubuntu
        CANNOT BE HIBERNATED FOR MORE THAN 60 DAYS 

# CloudWatch

 - monitoring services to monitor AWS resources as well as apps
 - performance monitoring:
    - Compute
        - EC2 instances
        - Autoscaling groups
        - Elastic Load Balancers
        - Route53 Health check
    - Storage 
        - EBS Volumes
        - Storage Gateway
        - CloudFront
EC2:
    - CPU
    - Network
    - Disk 
    - Status Check

CloudTrail:
    - camera into your AWS environment
    - user and resource activity
    - records Management Console actions and API Calls
        - which users / accounts called AWS
        - source IP address 
        - when called

CloudWatch:  monitors performance
CloudTrail:  monitors API calls in AWS platform

CloudWatch:
    - every 5 minutes by default   **
    - can have 1 minute intervals 
    - can create alarms to trigger notifications 

NOTE: 
    CloudWatch about PERFORMANCE
    CloudTrail about AUDITING


Can create regional and global dashboards
Can create alarms
Can send logs to CloudWatch    
    - aggregate, monitor and store logs
Events: near real-time stream of system events 
    - respond to state changes in AWS resources


# AWS CLI

spin up an instance 
run: aws configure 
  > asks for access key and secret access key

aws s3 ls   

aws s3 mb s3://knotknull.really-stupid-bucket-name

Secret directory --v

cd ~/.aws


[ec2-user@ip-172-31-61-160 .aws]$ ls -l
total 8
-rw-------. 1 ec2-user ec2-user  30 Nov  9 17:40 config
-rw-------. 1 ec2-user ec2-user 116 Nov  9 17:40 credentials

[ec2-user@ip-172-31-61-160 .aws]$ cat credentials
[default]
aws_access_key_id = AK.................D
aws_secret_access_key = a.............................X

[ec2-user@ip-172-31-61-160 .aws]$ cat config
[default]
region =  us-east-1


# IAM / AWS Roles

https://aws.amazon.com/blogs/security/new-attach-an-aws-iam-role-to-an-existing-amazon-ec2-instance-by-using-the-aws-cli/
https://aws.amazon.com/blogs/security/easily-replace-or-attach-an-iam-role-to-an-existing-ec2-instance-by-using-the-ec2-console/



Roles allow to interact with AWS without keys, etc.

IAM > create role > 
    Trusted Entity type:  AWS Service
    Use Case :  EC2
    [NEXT]
    Add Perms Policies: 
    [x] AdminAccess
    [CREATE]


To add a role to an existing EC2 instance: 
    EC2 > instance > Actions > Security > Modify IAM Role
    Choose Role 
    [ Update IAM Role]


NOTES: 
    - Roles more secure than access keys
    - Roles easier to manage
    - Roles can be assigned to EC2 instance at console and CLI
    - ROLES ARE UNIVERSAL, use them in any region


# Bootstrap Scripts

EC2 > Launch an instance > 
.
.
.
Advanced Details > 
User Data

put in commands or upload a file


# Instance Metadata


get metadata from ec2 instance

Address to get meta data from: http://169.254.169.254
     - IPv6 http://[fd00:ec2::254]/latest/user-data

OLD WAY :     **
curl http://169.254.169.254/latest/user-data

http://169.254.169.254/latest/meta-data/
http://169.254.169.254/latest/dynamic/
http://169.254.169.254/latest/user-data



NEW WAY (2024) :     **
TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"` \
&& curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/user-data

NOTE:  The above gets an api token first and then makes a second call with the token to get the user data 
. get token first:
    TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"` 

use the TOKEN to call curl for metadata:

    curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/user-data


all of the metadata you can query 
    curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/metadata
    i.e. curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/metadata/hostname

ami-id
ami-launch-index
ami-manifest-path
block-device-mapping/
events/
hostname
iam/
identity-credentials/
instance-action
instance-id
instance-life-cycle
instance-type
local-hostname
local-ipv4
mac
managed-ssh-keys/
metrics/
network/
placement/
profile
public-hostname
public-ipv4
public-keys/
reservation-id
security-groups
services/

Dynamic info:

TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"` && curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/dynamic/instance-identity/document
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100    56  100    56    0     0   6901      0 --:--:-- --:--:-- --:--:--  7000
{
  "accountId" : "709596356054",
  "architecture" : "x86_64",
  "availabilityZone" : "us-east-1b",
  "billingProducts" : null,
  "devpayProductCodes" : null,
  "marketplaceProductCodes" : null,
  "imageId" : "ami-063d43db0594b521b",
  "instanceId" : "i-0a1f63ada50c5f1a7",
  "instanceType" : "t2.micro",
  "kernelId" : null,
  "pendingTime" : "2024-11-09T21:09:23Z",
  "privateIp" : "172.31.53.155",
  "ramdiskId" : null,
  "region" : "us-east-1",
  "version" : "2017-09-30"
}[root@ip-172-31-53-155 ec2-user]# 


# EFS

Elastic File System 
 - file system for EC2 instances
 - capacity is elastic, do not have to pre-provision
 - for linux based 
 - like EBS 
    - EBS can only be mounted by one machine
    - EFS volume can be mounted by several machines

- on prem can access EFS via DirectConnect
- 2 performance modes:
    - general purpose 
    - max i/o

- EFA IA (Infreq. Access)
    - cheaper instance

- data redundant across multiple AZs


NOTE: ensure NFS protocol has been added to inbound rule  of the security group for the instance mounting the EFS



Create EFS cluster 

to mount on EC2 

sudo mount -t efs -o tls fs-0655fd1617d986dbd:/ efs


- EFS supports NFS v4 
- only pay for storage used
- scale up to petabytes
- can support 1000s of concurrent NFS connections
- Data store across multiple AZs within a region
- Consistency:  Read after Write

# FSx for Windows and Lustre

FSx for Windows
 - fully managed native Microsoft Windows file system 
 - build on Windows Server
 - essentially a Windows File Server
    - can work with SQL Server, IIS, Active Directory, Sharepoint, etc.

            Windows FSx                                    EFS
     - Managed Windows Server that                      - A managed NAS filer for EC2 
     runs Windows Server Message Blocks                 instances based on NFSv4       
     (SMB)-based file services

    - Designed for Windows and Windows apps             - one of first network file sharing protocols
                                                        native to Unix and Linux  
    - Supports AD users, access control lists, 
    groups and security policies along with 
    Distributed File System (DFS) and replication


FSx for Luster 
 - fully managed file system that is optimzed for compute instensive workloads: 
    HPC, ML, etc.
 - 100s GBs / sec throughput 
 - millions of IOPS 
 - sub-second latencies
 - Can store data directly on S3

SMB == FSx for Windows


# EC2 Placement Groups 

 - A way to place EC2 instances 
 3 types of Placement Groups: 
    - Clustered Placement Group
    - Spread Placement Group
    - Partitioned 


Clustered Placement Group
 - grouping of instances within a single AZ
 - apps that need low network latency
 - high network throughput or both
NOTE: only certain instances can be launched in 
   to a Clustered Placement Group

Spread Placement Group (Opposite of Clustered)
 - group of instances that are each placed on distinct 
   underlying hardware
        - separate rack
        - separate network
        - separte power
  i.e. if a rack fails, only that instance fails      
 - apps that have a small number of critical instances 
    that should be kept separate from each other
 - Individual Critical Instances
 - can be in different AZs in one region


Partitioned Placement Groups (Similar to Spread )
 - each group divided into logical segments (partitions)
 - each partition within a placement group  has its own set of racks
 - each rack has own network and power source
 - no 2 partitions within placement group share same racks

multiple instances per partition
     i.e. HDFS, HBash, Cassandra


Name of placement group must be unique within AWS Account
Only certain types of instances can be launched in placement group 
    - Compute Optimized 
    - GPU, Memory Optimized   (COGMOS)
    - Storage Optimizes

AWS recommends homogenous instances within clustered placement groups

Can't merge placement groups 

Can move an instance into a placement group 
    - must be in stopped state 
    - can move or remove and instance via CLI or SDK (not console, is this still correct ?)



# HPC on AWS

used in: genomics, financial risk modeling, weather prediction, etc

Data Transfer: How to get data into AWS
 - Snowball, Snowmobile
 - DataSync
 - DirectConnect 
    - cloud service solution to establish dedicated network connection 
    from on prem to AWS.  Private connectivity between office, data center, colo, etc.
    to AWS
    - can reduce costs
    - increase bandwidth throughput
    - dedicated line from on prem to AWS

Compute 
    - EC2 GPU / CPU Optimized
    - EC2 fleets (Spot intaces or Spot fleets)
    - Placement Groups

Network:
    - Enhanced Netowrking  (SR-IOV) Single Root I/O virtualization
    - Elastic Network Adapters (100 Gbps)
    - Elastic Fabric Adapters

EBS:
    - Scale up to 64k IOPS w/ Provisioned IOPS
    - Instance Store: scale to millions of IOPS, low latency

Network Storage:
    - S3 : Distributed object store, not a file system
    - EFS: Scale IOPS based on total size, use Provisioned IOPS
    - FSx for Lustere: Scale IOPS based on total size, use Provisioned IOPS

Orchestration & Automation 
 - AWS Batch
    - run 100ks of batch computing jobs
    - supports multi-node parallel jobs, 
        - single job that spance multiple EC2 instances
    - schedule jobs and launch EC2 instances as needed

 - AWS Parallel Cluster 
    - open source cluster management tool
        - easy to deploy HPC clusters 
    - text file to model to provision resources
    - automate creation of VPC, subnet, cluster type and instance types

# AWS Web Aplication Firewall (WAF)
    - monitor HTTP / HTTPS requests that are forwarded to 
        - CloudFront
        - Application Load Balancer
        - API Gateway

    - control access to content
    - Layer 7 aware firewall

    - can scan query string parameters

    - can configure conditions as 
        - what IP addresses are allowed to make request 
        - what query string parameters are needed to be passed for request to be allowed

    - CloudFront, API Gateway, App Load Balancer will allow it 
      or give HTTP 403 status code

WAF allows 3 Types of Behaviors:
    - allow all requests except ones specified
    - block all requests except ones specified
    - count the requests that mtch the properties specified

Protects against web attacks using conditions specified
Define conditions by using characteristics of web requests:
    - IP addresses that requests originiate from
    - Country that requests originiate from
    - Valaues in request headers
    - Strings that appear in requests, 
        - specific strings
        - strings that match regex patterns
    - Length of requests
    - SQL code that could be SQL injections
    - Presence of a script that is likely to be malicious 
        - cross-site scripting

# EC2 Summary

EC2: 
 - If Spot Instance is terminated by EC2, you will not be charged for partial hour of usage.
 - Fight Dr McPxz AU
 - Termination Protection is turned off by default

EBS: 
Root EBS volume deleted by default on termination 
 - Root EBS volume can be encrypted
 - additional volumes can be encrypted
 - snapshots exist on S3
    - point in time copies of volume
    - incremental
 - can create AMIs from volumes or snapshots
 - can change EBS volume size and storage types
 - ALWAYS in same AZ as EC2 instance

HOWTO: MOVE EC2 Volume to another AZ
    - take snapshot
    - create AMI from snapshot
    - launch AMI to new AZ

HOWTO: MOVE EC2 Volume to another Region
    - take snapshot
    - create AMI from snapshot
    - copy AMI to target region
    - launch from AMI in target region

NOTE: Can create snapshot that can be used to create EBS Volume in different AZ
      Can create snapshot that can be used to create EBS Volume in different Region

Security Groups
 - All Inbound traffic is blocked 
    - inbound traffic  is automatically allowed out
 - All Outbound traffic is blocked 
 - SGs are STATEFUL
 - multiple ec2 to an SG
 - multiple SG  to an ec2
 - cannot block specific IPs 
    - use NACLs
 - only allow rules 
    - no deny rules

Encryption:
    - snapshots of encrypted volumes are automatically encrypted
    - volumes restored from encrypted snapshots are encrypted automatically
    - Can share unencrypted snapshots ONLY

HOWTO: Encrypt Root Volume that is unencrypted
    - take snapshot of root device volume
    - copy snapshot and select encrypt option
    - create AMI from encrypted snapshot
    - launch new AMI instances with encrypted root volume


Instance Store: 
    - Ephemeral Storage (can lose data)
    - CANNOT BE STOPPED, if so lose daata
    - Can reboot and not lose data

Enhanced Networking 
    - Elastic  Network Interface (ENI)
    - Enhanced Network Adapter   (EN / ENA)
    - Enhanced Fabric  Adapter   (EFA)

CloudWatch 
    - Monitors (WATCHES) performance
        - monitors AWS and apps running on it
    - Default every 5 minutes
    - Dashboards, Events, Alarms, Logs  (DEAL)  

    CloudTrail == Auditing

Roles: 
    - more secure than acckey
    - can be assigned to instance after creation
    - UNIVERSAL (any region)

Metadata 
    169.254.169.254/latest/meta-data
    169.254.169.254/latest/user-data   << Bootstrap Script

    Version 2 needs a token to be passed to metadata URL
        get token first:
            TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"` 
        use the TOKEN to call curl for metadata:
            curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/user-data


Placement Groups
    - Clustered     (close together, same rack) 
            - low latency / high thruput
            - SAME AZ
            - homogenous instances 

    - Spread        (spread apart, guaranteed not on same rack) 
            - critical instances
            - can span AZs 
            
    - Partitioned   (hybird: instances close together on partitions, partiions spread apart)
            - Multiple EC2 instances: HDFS, HBase, Cassandra
            - can span AZs 

NOTE:   can't merge placement groups
        YOU CAN move existing instance into placement group  


LAB: Using Tags and Resource Groups

Tag Editor:
    - Tag multiple different types of resources using the same tags  i.e. Env=QA or Acct=112233

AWS Config:
    - can utilize rules to determine if resources are in compliance with configuration rules

LAB: EC2 Roles and Instance Profiles

IAM Role:  "what you can do"

Instance Profile:
    - can associate a role with an EC2 instance, this is what an Instance Profile is for
    - entity or container (?) connect an IAM Role to an EC2 instance
    - IAM Role  is       : "what can I do i"
    - Instance Profile is: "who am i"

- Provide Temporary Credentials that are rotated automatically

NOTE: when you create a ROLE and ATTACH to an EC2 Instance via Management Consol, 
   the creation and use of Instance Profile is handled behind the scenes 

Trust Policy: allows EC2 service to assume role  

1. Create policy trust_policy_ec2.json: 
{
  "Version": "2012-10-17",
  "Statement": [
    {
       "Effect": "Allow",
       "Principal": {"Service": "ec2.amazonaws.com"},
       "Action": "sts:AssumeRole"
    }
  ]
}

2. Create Role 

aws iam create-role --role-name DEV_ROLE --assume-role-policy-document file://trust_policy_ec2.json

OUTPUT:  
{
    "Role": {
        "Path": "/",
        "RoleName": "DEV_ROLE",
        "RoleId": "AROAT537H4KBEDHTOPKOH",
        "Arn": "arn:aws:iam::270312923778:role/DEV_ROLE",
        "CreateDate": "2024-11-10T21:40:42+00:00",
        "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": {
                        "Service": "ec2.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                }
            ]
        }
    }
}

NOTE: Role created with Assume Role policy attached 


3. Grant role read access to S3 Buckets, need to create policy that allows this

Create S3 Access Policy document  dev_s3_read_access.json 

{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "AllowUserToSeeBucketListInTheConsole",
      "Action": [
        "s3:ListAllMyBuckets",
        "s3:GetBucketLocation"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:s3:::*"
      ]
    },
    {
      "Effect": "Allow",
      "Action": [
        "s3:Get*",
        "s3:List*"
      ],
      "Resource": [
        "arn:aws:s3:::<DEV_S3_BUCKET_NAME>/*",
        "arn:aws:s3:::<DEV_S3_BUCKET_NAME>"
      ]
    }
  ]

}

NOTE:  <bucket_name>/*   allows get / list to objects within the bucket
NOTE:  <bucket_name>     allows get / list to just the bucket

4. create the managed policy: 

aws iam create-policy --policy-name DevS3ReadAccess --policy-document file://dev_s3_read_access.json

OUTPUT: 

{
    "Policy": {
        "PolicyName": "DevS3ReadAccess",
        "PolicyId": "ANPAT537H4KBAQK4ATMNH",
        "Arn": "arn:aws:iam::270312923778:policy/DevS3ReadAccess",
        "Path": "/",
        "DefaultVersionId": "v1",
        "AttachmentCount": 0,
        "PermissionsBoundaryUsageCount": 0,
        "IsAttachable": true,
        "CreateDate": "2024-11-10T21:53:53+00:00",
        "UpdateDate": "2024-11-10T21:53:53+00:00"
    }
}

5. Attached managed policy to Role

aws iam attach-role-policy --role-name DEV_ROLE --policy-arn "<DevS3ReadAccess_POLICY_ARN>"


list attached policies of role (DEV_ROLE)
 aws iam list-attached-role-policies --role-name DEV_ROLE
OUTPUT: 
{
    "AttachedPolicies": [
        {
            "PolicyName": "DevS3ReadAccess",
            "PolicyArn": "arn:aws:iam::270312923778:policy/DevS3ReadAccess"
        }
    ]
}


6. create instance profile

aws iam create-instance-profile --instance-profile-name DEV_PROFILE

OUTPUT:
{
    "InstanceProfile": {
        "Path": "/",
        "InstanceProfileName": "DEV_PROFILE",
        "InstanceProfileId": "AIPAT537H4KBAN4X7PAWO",
        "Arn": "arn:aws:iam::270312923778:instance-profile/DEV_PROFILE",
        "CreateDate": "2024-11-10T22:19:57+00:00",
        "Roles": []
    }
}


7. add role to  instance profile
aws iam add-role-to-instance-profile --instance-profile-name DEV_PROFILE --role-name DEV_ROLE


8.  Verify instance profile
aws iam get-instance-profile --instance-profile-name DEV_PROFILE


{
    "InstanceProfile": {
        "Path": "/",
        "InstanceProfileName": "DEV_PROFILE",
        "InstanceProfileId": "AIPAT537H4KBAN4X7PAWO",
        "Arn": "arn:aws:iam::270312923778:instance-profile/DEV_PROFILE",
        "CreateDate": "2024-11-10T22:19:57+00:00",
        "Roles": [
            {
                "Path": "/",
                "RoleName": "DEV_ROLE",
                "RoleId": "AROAT537H4KBEDHTOPKOH",
                "Arn": "arn:aws:iam::270312923778:role/DEV_ROLE",
                "CreateDate": "2024-11-10T21:40:42+00:00",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ec2.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                }
            }
        ],
        "Tags": []
    }
}


9.  Attach DEV_PROFILE Role to Instance

aws ec2 associate-iam-instance-profile --instance-id <LAB_WEB_SERVER_INSTANCE_ID> --iam-instance-profile Name="DEV_PROFILE"
OUTPUT:
{
    "IamInstanceProfileAssociation": {
        "AssociationId": "iip-assoc-02f68d9cfc4fc2372",
        "InstanceId": "i-0481fe9257d238059",
        "IamInstanceProfile": {
            "Arn": "arn:aws:iam::270312923778:instance-profile/DEV_PROFILE",
            "Id": "AIPAT537H4KBAN4X7PAWO"
        },
        "State": "associating"
    }
}



10. Verify config of web server 

aws ec2 describe-instances --instance-ids <LAB_WEB_SERVER_INSTANCE_ID>
OUTPUT: 
.....
                    "IamInstanceProfile": {
                        "Arn": "arn:aws:iam::270312923778:instance-profile/DEV_PROFILE",
                        "Id": "AIPAT537H4KBAN4X7PAWO"
                    },


https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html
https://aws.amazon.com/iam/faqs/
https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2_instance-profiles.html
https://aws.amazon.com/tools/
https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html
https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html#config-settings-and-precedence
https://boto3.amazonaws.com/v1/documentation/api/latest/guide/configuration.html
https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html



TEST 

- Cannot delete the snapshot of a root device of an EBS volume used by a registered AMI
- can detatch an additional EBS (non-root volume)
- Hypervisors for EC2:  XEN, Nitro
- Standard Reserviced instances cannot be moved between regions
- which ec2 feature uses SR-IOV?    Enhanced Netowrking
- Cheapest EBS options are always HDD over SDD !!!!
- Changes to IAM policies take effect almost immediatly
    - IAM Policy exists in AWS API and not on instance itself
- IP Address to retrieve instance meta-data or user-data:  http://169.254.169.254
- Spread placement groups can be deployed across Availability Zones
- IAM Roles an be attached to instances in stopped or running state or 
   replaced for instances in the running state
- You can control whether an EBS root volume is deleted when its associated instance is terminated.
   By default, the DeleteOnTermination attribute for root volumes is set to 'true.' 
- which AWS cli command shouldI use to crate a snapshot of an EBS volume: 
    aws ec2 create-snapshot 


## Databases on AWS

AWS RDBMS (RDS):
    - SQL Server
    - Oracle
    - MySQL
    - PostgreSQL
    - Aurora
    - MariaDB

2 Key Features: 
- Multi-AZ for Disaster Recovery 
- Read Replicas - Performance

Multi-AZ
 - AWS points DNS for RDS instance to an IP, 
    fail over points DNS to second IP 
 - failovers automatic with Multi-AZ


Read Replicas
 - write to primary db is replicated to Read Replica
 - No automatic fail over
 - can have 5 read replicas


DynamoDB:
 - NoSQL
 - Collection holds Documents, key - value pair
 -  Document can have different fields

Data Warehousing:
OLTP vs OLAP

Redshift (OLAP): 
- Amazon Data Warehouse:  

ElastiCache:
- web service for in-memory cache in cloud 
- improves web app performance by caching to in-memory
- 2 open source in-memory caching engines
     - memcached
     - redis


## RDS LAB

connectivity endpoint: map-sql-db.cjy7mdwejhd4.us-east-1.rds.amazonaws.com
- RDS runs on virtual machines 
    - can't login to RDS VMs 
- RDS patching OS and DB is Amazon's responsibility
- RDS is NOT SERVERLESS

bootstrap: 

#!/bin/bash
yum install amazon-linux-extras httpd -y 
amazon-linux-extras install php7.2 -y
yum install httpd -y
systemctl start httpd
systemctl enable httpd
cd /var/www/html
wget https://wordpress.org/latest.tar.gz
tar -xzf latest.tar.gz
cp -r wordpress/* /var/www/html/
rm -rf wordpress
rm -rf latest.tar.gz
chmod -R 755 /var/www/html/*
chown -R apache:apache /var/www/html/*

NOTE: THIS DID NOT WORK !!!  PHP was not running

# RDS Backups, Multi-AZ, Read Replicas

2 types of backups: 
    - automated backups 
        - allow you to recover db to any point in time within a retention period
            - retention period between 1 and 35 days
        - takes full daily snapshot and stores transaction logs through out day.
        - On recovery, AWS will frst choos most recent daily backup and apply transaction logs
        - enabled by DEFAULT
        - stored to S3  / free storage space equal to size of DB. 
        - backups taken within a defined window
        - during backup window, storage I/O may be suspended while your data is being backed up 
            - may experience latency 

    - snapshots
        - DB Snapshots are done manually (user initiated)
        - They are stored even after you delete the original RDS instance

when you restore, the restored version of DB will be a new RDS instance with new DNS endpoint

Encryption: 
    - encryption at rest supported for MySQL, Oracle, SQL Server, PostgreSQL, MariaDB, Aurora **
    - done via KMS
    - once RDS instance is encrypted, data stored at rest in the underlying storage is encrypted
        - backups, read replicas and snapshots are also encrypted

Multi-AZ: 
    - exact copy of Prod DB in another AZ
    - All writes hitting Prod DB synchronized to other AZ
        - AWS handles syncing
    - if database maintenance, or DB or AZ Failure, RDS fails over to standby 
        - no admin intervention
        - it updates URL to backup
    - for DR only, NOT USED FOR PERFORMANCE
    - available for SQL Server, Oracle, MySQL Server, PostgreSQL, MariaDB **


Read Replica: 
    - main DB asyncronously replicated to multiple instances
        - can read from either replica and write to Prod DB
    - can have Read Replicas of Read Replicas (watch for latency)
    - available for SQL Server, Oracle, MySQL Server, PostgreSQL, MariaDB, Aurora **
    - Used for PERFORMANCE NOT DR
    - Must have automatic backups turned on to deploy read replica
    - up to 5 read replicas copies of any db
    - each Read Replica will have its own DNS end point
    - can have Read Replicas that have multi-AZ 
    - can create Read Replicas of Multi-AZ source databases.
    - Read Replicas can be promoted to be their own databases (breaks replication)
    - Can have Read Replica in second region

RDS Backups, Multi-AZ, Read-Replicas LAB
    - modify database to be Multi-AZ
    - reboot w/ failover causes the backup to become primary

NOTE: Need to have backups turned on before creating Read Replicas **

Multi-AZ: 
 - can force a failover from one AZ to another by rebooting RDS instace


# DynamoDB 
    - NoSQL solution
    - single digin ms latency 
    - fully managed db
    - supports document and key-value
    - flexible data model ideal for 
        - mobile, web 
        - gaming, ad-tech
        - IoT, etc


    - Stored on SSD
    - spread across 3 geographically distinct data centers **
    - Eventually Consistent Reads (Default)
        - consistency across all copies of data usually reached within 1 second 
        - Best Read Performance
    - Strongly Consistent Reads
        - returns result that reflects all writes that received a successful respons 
          prior to the read ( less than 1 second)
        - if update is done and need to read that update in less than 1 second

# Advanced DynamoDB 
DynamnoDB Accelerator (DAX)
    - fully managed, highly available in-memory cache
    - 10x performance improvement
    - Reduces request time from milliseconds to microseconds
    - don't need to manage caching logic
    - Compatible with DynamoDB API calls

    [ Application ]  <------>  [ DAX ] <------>  [ DynamoDB ]

        - no change to application
        - DAX has write thru cache
        - High Availability, will failover to own replicat in another AZ


Transactions
    - Multiple "all or nothing" operations 
        - financial transactions
        - fulfilling orders
    - Two underlying reads / writes  **
        - prepare / commit 
    - Up to 25 items or 4 MB of data


On-Demand Capacity
 - pay-per-request pricing
 - balance cost / performance
 - no minimume capacity
 - no read/write charges when idle
    - only storage and backups
 - pay more per request than provisioned capacity
 - use for new product launces


On-Demand Backup and Restore
 - full backups at any time
 - zero impact on table performance / availability
 - consistent within seconds / retained until deleted
 - operates within same resion as the source table

Point-in-Time Recover (PITR)
 - protects against accidental writes / deletes 
 - restore to any point in the last 35 days
 - incremental backups
 - NOTE enabled by default  **
 - latest restorable: five minutes in the past


Streams: 
 - Time-ordered sequence of item-level changes in a table 
 - FIFO
 - stored for 24 hours
 - inserts, updates, deletes


stream record
  - single modification to Dynamo DB table
  - each stream record assigned squence number
  - stream record organized into groups / shards 
  - shard contains info on iterating thru records
  - combine with Lambda functions for functionality "like" stored procedures in traditional databases


                                    shard (group of stream records)
                                       |
            +--------------------------|-------------------------------------+  +
            |                   +------------+                               |  |
            |     [.][.][.][.]   [.][.][.][.]   [.][.][.][.]                 |  +-DynamoDB Stream
            |         ^                                                      |  |
            +---------|------------------------------------------------------+  +
                      +--- stream record 
              (representing an change to DyanamoDB table)



Global Tables 
Managed Multi-Master, Multi-Region Replication
 - globally distributed applications
 - based on DynamoDB strams
 - Multi-region redundancy for DR or HA
 - No application rewrite
 - Replication latency under 1 sec


Need to have DynamoDB streams enabled

Database Migration Service (DMS)
migrate from source to target

       Source                             Target
 (on-prem, EC2, RDS)                (on-prem, EC2, RDS)      
------------------------          ------------------------  
Aurora      MongoDB                 Aurora      Kafka
S3          MySQL               DocumentDB      MariaDB
MariaDB     Oracle                DynamoDB      SQL Server
AzureDB     PostgreSQL             Kinesis      MySQL
SQL Server  Sybase                Redshift      Oracle
DB2                                    S3       PostgreSQL
                             Elasticsearch      Sybase

- Data transformation logic in DMS
    - migration performed automatically
- Source database is operational during migration


Security
 - Encryption at Rest (KMS)
 - Site to Site VPN
 - Direct Connect (DX)
 - IAM policies and roles 
 - Fine-grained access
 - CloudWatch / CloudTrail
 - VPC endpoints to (private IPs) avoid publice internet 

# Redshift 

 - petabyte scale managed data warehouse
 - single node (160 GB)  **
 - multi-node
    - Leader  Node ( manages client connections and receives queries )
    - Compute Node 
        - store data 
        - perform queries / computations
        - up to 128 compute nodes

 - advanced compression
    - columnar data
        - column compression better than row compression
    - uses multiple compression techniques
    - doesn't require indexes / materialized views
    - when loading data into empty table 
        - Redshift analyzes data and selects appropriate compression scheme

 - Massively Parallel Processing (MPP)
    - distributes data and query loads across all nodes
    - can scale by adding nodes

 - Backups
    - eabled by default, 1 day retention period
        - max 35 days
    - attempts to maintain at least 3 copies of data
        - original and replica on compute nodes + one backup in S3
    - can asyncronously replicate snapshots to S3 in another region for DR

 - Priced 
    - Compute Node hours    
        - total number of hours you run all compute nodes for billing period
        - 1 unit per node per hour
            3 nodes * 24 hr * 30 days = 2160 incance hours            
        - not billed for leader node hours
    - Backup
    - Data Transfer 
        - only within a VPC / not outside it

 - Security
    - Encrypted in transit using SSL
    - Encrypted at rest using AES-256
    - Redshift hangles key management
    - Can manage own keys via: 
        - HSM  (Hardware Security Management)
        - KMS 

 - Availability
    - currently only available in 1 AZ
    - Can restore snapshots to new AZs in event of outage

# Aurora

 - MySQL and PostgreSQL compatible Relational DB engine 
    - combines speed of high-end commercial db
    - simplicity and cost-effectiveness of open source dbs

 - up to 5x better performance than MySQL 
 - up to 3x better performance than PostgreSQL 

Features: 
    - Start with 10 GB, scales in 10 GB increments to 64 TB  **
        (Storage is autoscaling )

    - Compute resources can scale to 32 vCPUs and 244 GB RAM **

    - 2 copies of data contained in each AZ   **
        - min 3 AZ ==>> 6 copies of data
   
Scaling:
    - can handle loss of up to 2 copies of data without affecting write availability **
    -      """   loss of 3 copies of data without  
    - Aurora storage is self-healing: 
        - data blocks / disks are scanned continuously for errors and repaired automatically

Replicas: **
 - Aurora Replicas     : 15
 - MySQL Read Replicas : 5
 - PostgreSQL Read Repl: 1

Feature Comparison  **
                                                Amazon Aurora Replicas              MySQL Replicas
Number of Replicas                                      up to 15                        up to 5
Replication Type                                       Asynch (ms)                      Asynch (sec)
Performance impact on primary                           Low                             High
Replica location                                        In-region                       Cross-Region
Act as failover target                                  Yes (no data loss)              Yes (potentially minuste of data loss)
Automated failover                                      Yes                             No
Support for user-defined rep delay                      No                              Yes
Support for different data or schema                    No                              Yes
   vs primary  


Backups: 
    - automated backups always enabled
        - backups DO NOT IMPACT db performance

    - can take snapshots of Aurora
        - snapshots DO NOT IMPACT db performance

    - can share Aurora Snapshots with other AWS accounts

Amazon Aurora Serverless: 
    - on demand, autoscaling config for 
        MySQL and PostgreSQL compatible edition of Amzaon Aurora
    - Serverless DB cluster: 
        -  automatically starts up / shuts down 
        -  scales cpacity up or down based on applications needs

    - simple, cost-effective option for infrequent, intermittent, unpredictable workloads
        - pay on a per invocation, not paying for idle resources 

Create Aurora read replica from MySQL 
 RDS > RDS Instance > Actions > Create Aurora read replica 

once available
  choose auroroa writer node and promote read replicat 
  NOTE:  you are taking a MySQL DB and copying to Aurora DB
 RDS > RDS Instance > Actions > Promote Read Replica


# Elasticache
 - web servcies for in-memory cache in cloud
 - improve performance of web apps
    - retrieve infor from fast in-memory cache
 - Supports to open source caching engines: 
    - memcached
    - redis

Comparison 

        Requiement                              Memcached           Redis        **
Simple Cache to offload DB                      Yes                 Yes 
Ability to scale horizontally                   Yes                 Yes 
Multi-threaded performance                      Yes                 No  
Advanced data types                             No                  Yes 
Ranking / Sorting data sets                     No                  Yes 
Pub / Sub capabilities                          No                  Yes 
Persistance                                     No                  Yes 
Multi-AZ                                        No                  Yes 
Backup & Restore Capabilities                   No                  Yes 


Redis is Mult-AZ
Backup and restores of Redis 


# Database Migration Service (DMS)
- migrate RDBMS, Data Warehouses, NoSQL to AWS Cloud 
    - between on-prem instances (AWS Cloud Setup)
    - compbinations of cloud and on-prem

- DMS is a server in AWS Cloud and runs replication software
    - create source (extract) and target (load) connections
    - schedule task that runs on server and moves data
    - DMS crates tables and associated primary keys
    - can pre-create target tables manually 
    - utilize AWS Schema Conversion Tool (SCT)
        - create somr or all of target tables, indexes, views, triggers, etc.


                  +-----------------------------------------------------------+
[ Source DB ] --> |                           AWS DMS                         |  --> [ Target DB]
                  | [source  ] -> [Replication Task    ] -> [target]          |
                  | [endpoint]    [Replication Instance]    [endpoint]        |
                  +-----------------------------------------------------------+
- Supports homogenous migrations (ex. Oracle to Oracle)
- Supports heterogeneous migrations ( MS SQL Server to Aurora)


Sources **                                          Targets
on-prem and EC2 instances:                      on-prem and EC2 instances: 
    - Oracle, Microsoft SQL Server                  - Oracle, Microsoft SQL Server
    - MySQL, MariaDB, PostgreSQL                    - MySQL, MariaDB, PostgreSQL
    - SAP, MongoDB, Db2                             - SAP
Azure SQL Database                              RDS 
Amazon RDS (including Aurora)                   Redshift
Amazon S3                                       DynamoDB
                                                S3
                                                Elasticsearch service
                                                Kinesis Data Streams
                                                DocumentDB


NOTE:  NEED Schema Configuration Tool for heterogeneous migration  
       DO NOT NEED SCT when migrating idential databases 



# Caching Strategies

- CloudFront
- API Gateway
- ElastiCache - Memcached and Redis
- DynamoDB Accelerator (DAX)


# EMR Overview
Elastic Map Reduce
    - cloud big data platform
    - used with 
        - Spark, Hive, HBase, Flink, Hudi, Presto 

- EMR cluster collection of EC2 instances i.e. node: 
    - different software on each node type 
    - like Apache Hadoop

Node Types: 
    - Master Node: manages cluster
        - tracks status of tasks
        - monitors healt of cluster
        - every cluster has a master node

    - Core Node: runs tasks and stores data in HDFS
        - multinode clusters have at least one core node

    - Task Node: runs tasks, DOES NOT STORE DATA
        - task nodes are optional

NOTE: Smallest cluster you can have is 1, that is a Master Node   **
      Every node can communicate with each other



Log data is store on /mnt/var/log on Master Node   **
    - can periodically archive log files on Master Node to S3 
    - EMR does this at 5 minute intervals
        - ONLY WHEN CLUSTER IS FIRST SETUP

# Database Summary


Read Replicas:
  - can be Multi-AZ  **
    - increase performance
  - Can be in different Regions **
  - MySQL, PostgreSQL, MariaDB, Oracle, Aurora, MSSQL
  - Can be promoted to master / breaks replication

Multi-AZ :
 - Used for DR ONLY / not performance
 - Force a failover by rebooting RDS instance

Encryption at res: 
  - MySQL, PostgreSQL, MariaDB, Oracle, Aurora, MSSQL
  - Uses KMS 

DynamoDB 
 - Serverless
 - Stored on SSD
 - Spread across 3 geo distinct data centers
 - Eventual Consistency Reads (Default) if data can be consistent > 1 sec
 - Strongly Consistency Reads if data had to be consistent < 1 sec

Redshift 
  - only in 1 AZ
  - backups enabled by default = 1 day retention
  - Attempts to keep 3 copies of data 
    - original 
    - replica on compute nodes 
    - backup in S3
  - Async replica snapshots to S3 in another region for DR

Auroroa 
    - 2 copies of data in each AZ with min 3 AZ == 6 total copies
    - auotmated backups turned on by default
    - share snapshots with other AWS accounts
    - 3 types of replicas 
        - Aurora Replicas  ( within same region = 15) 
        - MySQL replicas   (multiple regions = 5)
        - PostgresSQL      (only 1)



RDS Multi-AZ and Read Replica labs

wordpress.c9x6gz16a86n.us-east-1.rds.amazonaws.com
load-balancer-388667590.us-east-1.elb.amazonaws.com

Quiz:

New RDS Instance: automated backups enabled by default
Echeck for Error node in response from RDS API

DocumentDB has MongoDB compatability

Can crate RDS SQL Server max 16 TB

DynamoDB charges in a single region 
    - Read and Write Capacity
    - Storage of Data
    NOTE: no charge to data transfer within a single region, cross region is charged at both ends
            - no charge for local secondary indexes


I/O may be briefly suspended while the backup process initializes (typically under a few seconds), 
 and you may experience a brief period of elevated latency.

MySQL default port


3 data formats Athena supports 
    - Parquet, ORC, JSON


Data transferred between Availability Zones for replication of Multi-AZ deployments is free. 
Reference: Amazon RDS for MySQL Pricing: Data Transfer.

 ## Advanced IAM

# AWS Directory Service






















.