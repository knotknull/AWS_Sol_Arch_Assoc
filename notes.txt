Notes for acloud.guru AWS Solution Architect Associate training







Availability Zone == Data Center, can have multiple DCs in an AZ

Region: geographical area, each Region consists of 2 or more AZ.

Edge Location: endpoints for AWS which is used to cache content i.e. CloudFront (CDN)


Main course topics: compute, storage, databases, network, content delivery, security, IAM, compliance


## Identity and Access Management / S3

IAM: manage users and level of access to AWS Console



IAM Features: 
    - Centralized controle of AWS Account
    - Shared access to your AWS Account
    - Granular perms
    - Identity Federation (including Active Directory, Facebook, LinkedIn)
    - Multifactor Authentication
    - Provide temproary access for users / devices / services
    - Password rotation policy
    - Integrates with AWS services
    - Supports PCI DSS Compliance


Key IAM Aspects: 
    Users:    end users sucha as people, employees etc
    Groups:   collection of users, each user in the group will inherit the permissions of the group
    Policies: policies made up of policy documents (JSON that gives perms to what a User, Group, or Role is able to do)
    Roles :   create roles and assign to resources



## IAM LAB

> Console > Search > IAM
Upper right shows login console: 

https://iamwhatiam.signin.aws.amazon.com/console

NOTE:  I changed it to knotknull for the alias:
https://knotknull.signin.aws.amazon.com/console


Root Account:  Account that created the AWS account == "God Mode"

Policies > choose a police (i.e. Administrator Access), click on "+" for JSON: 
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": "*",
            "Resource": "*"
        }
    ]
}

- IAM is universal, does not apply to regions
- root account has full Admin Access
- new user has not access, can add console and programtic access

# billing alarm
CloudWatch > Alarms > Billing > Create Alarm


 - Create SNS topics
 - add email (confirm)

subscription to topic: 
 arn:aws:sns:us-east-1:709596356054:aws_billing_alarm:368bbef4-b4e2-4f70-b103-ab42cfb544d6


Take away:  use CloudWatch to create a billing alarm via SNS topic


## S3 

Simple Storage Service 
- object storage
    - key (name) / value (data)
    - version ID
    - metadata
    - ACLs
    - toreents

- data spread across multiple devices / facilities
- size: 0 bytes to 5TB files **
- unlimited storage
- files stored in buckets (think folder)
- universal namespace: must be globally unique
- successful upload:  HTTP 200 code
NOTE: not suitable for installing an OS on 


# S3 Consistency:
    - Read after Write for PUTS of new objects
    - Eventural Consistency for overwrite PUTS and DELETES (propogates)
        - could get older version or deleted file


# S3 Versioning: 
    Can version buckets and suspend versioning:
    - versioning give a version to each new put a key
    - suspending versioning makes the version id null 
        - if there versions without a null version id they will remain
        - putting a new entry with a key that has a null will overwrite the null key version
    - MFA Delete
    - Encryption

# S3 Guarantees:
    - 99.9% Availability **
    - 99.9999999999% Durability **    (11 9's )


# S3 Storage Classes

- S3 Standard
    - 99.99 Availability / 99.9999999 durability
        - stored redundantly across multiple devices / multiple facilities 
            - sustain loss of 2 facilities concurrently

- S3 IA (infreqeuently accessed)
    - less frequent access
    - requires rapid access when needed
    - lower fee than S3, charged retrieval fee


- S3 One Zone - IA (infreqeuently accessed)
    - low cost IA
    - don't require multiple AZs resiliency
NOTE: was known as RRS (Reduced Redundancy Storage)


- S3 Intelligent Tiering
    - optimize costs by automatically moving data to most cost effective access tier,
        - no performance impact / no operational overhead

- S3 Glacier
    - low cost storage for data archiving
        - retrieval time from minutes to hours

- S3 Deep Archive
    - lowest cost storage 
        - retrieval time 12 hours



**          S3 Standard     S3 Intelligent-Tiering      S3-IA       S3-One Zone IA      S3 Glacier      S3 Deep Archive
durability      11 9s               11 9s               11 9s           11 9s               11 9s               11 9s
availability    99.99               99.99               99.99           99.95               N/A                  N/A 
SLA             99.99               99                  99              99                  N/A                  N/A 
AZ zones         >=3                >=3                 >=3              1                  N/A                  N/A                   
Min Charge       N/A                N/A                128 kb          128 kb               40 kb                40 kb            
Min Duratio     N/A                30 days            30 days         30 days              90 days              180 days
Retrieval Fee   N/A                 N/A               per GB          per GB               per GB               per GB
1st byte latency  ms                 ms                 ms                ms               min - hr             hours


S3 Charges: 
- storage
- requests
- management priceing (tiers)
- data transfer
- transfer acceleration
    - use CloudFront to speed up bucket transfers
- cross region replication



Buckets viewed globally but can be housed regionally

Access:   **
    - Bucket Policies: applies across the entire bucket
    - Object Policies: applies to individual files
    - IAM policies to Users and groups: applies to users / groups


# S3 pricing
    - storage
    - requests / data retrieval
    - data transfer
    - mgmt & replication

S3 and S3 Intelligent Tiering is same for frequent access, less for IA tier
cost hierarchy: 
    S3 Std > S3 IA > S3 IA > S3 One Zone IA > Glacier > Glacier Deep Archive  **


# S3 Security / Encryption

    - Bucket Policies
    - ACL (to object)

S3 buckets can be configured to create access logs make to bucket.

Encryption in Transit 
    - SSL / TLS (https)

Encryption at Rest 
 - Server Side
    - S3 Managed Keys - SSE-S3: Amazon manages keys
    - AWS Key Management Service, Managed Keys - SSE-KMS: manage keys with AWS Key Management Service
    - Server Side Encryption w/ Customer Provided Keys:  SSE-C
    - NEW: Dual-Layer server-side encryption with AWS KMS Service Keys (DSSE-KMS)

 - Client Side Encryption
    - customer encrypts and uploads

Can encrypt individual objects and at bucket level.


# S3 Versioning 
    - stores all versions of an object (soft delete)
    - once enabled, CANNOT DISABLE, only suspend  **
    - lifecycle rules
    - MFA Delete


Note: latest version is available (can be made public)
      - lower versions not made available/public unless specifically made so
      DELETING the DELETE MARKER makes most recent version available  **

# S3 Lifecycle Rules
    - Automates moving objects between storage tiers 
        - can be used w/ versioning 
        - current and prior versions
buckets > bucket > management > lifecycle configuration > create rule 

# S3 Object Lock & Glacier Vault Lock
    Object Lock: write once, ream many (WORM)
        - prevent object from being deleted / modified for fixed amount of time or indefinitely 

        - Governance Mode: users can't overwrite or delete and object version or alter lock settings  **
                - special perms needed

        - Compliance Mode: protected object version can't be overwritten or deleted by ANY USER (including root user)  **
            - ensures object version can't be overwritten or deleted for the duration of the retention period (i.e. 7 Years)

        retention period: protects object version for fixed amount of time  
            - timestamp of expiration kep in version metadata

        - Legal Hold: prevents an object version from being overwritten or deleted
                - does not have a retention period.  In place until removed
                - can be applied / removed with s3:PutObjectLegalHold perm

    Glacier Vault Lock: deploy and enforce compliance controls for individual S3 Glacier Vaults 
            with Vault Lock Policy. 
                - specify controls in a Vault Lock Policy
                    - policy locked from future edits
- Object Lock == WORM
- Object Lock applied to objects or bucket
- governance mode and compliance mode
- Glacier Vault Lock = compliance controls for Glacier Vaults
    - Vault Lock policy locked for edits



# S3 Performance
    S3 Prefix:   between bucket name and object name 
        i.e.  /bucketname/folder1/subfolder2/xyz.txt  >> Prefix = /folder1/subfolder2


S3 latency:  1st byte within 100 - 200 ms

Throughput Requests can achieve: 
    - 3500 PUT / COPY / POST / DELETE   per PREFIX  **
    - 5500 GET/HEAD requests per second per PREFIX  **


NOTE: can get better performance by spreading reads across different prefixes i.e.:
    - 2 prefixes (/folder1/subfolder2) 11,000 requests / sec
    - 4 prefixes (/folder1/subfolder2/dir1/dir2 ) 22,000 requests / sec

MORE PREFIXES == BETTER PERFORMANCE !!  **

SSE-KMS Quotas: 

 - KMS Request rates: 
    - SSE-KMS has KMS limits 
        - upload   file:  GenerateDataKey in KMS API
        - download file:  Decrypt in KMS API

KMS Quota is region specific **
    - 5500 or 10k or 30k requests per second  **

NOTE: CANNOT REQUEST QUOTA INCREASE FOR KMS 


Uploads

    Multi-part uploads:
        - recommended for files over 100 MB  **
        - required for files over  5 GB   

Downloads:
    S3 Byte-Range fetches: 
        - parallelize downloads by specifying byte ranges
        - can speed up downloads
        - download partial file

# S3 Select & Glacier Select
    S3 Select:  retrieve subtset of data from object using simple SQL expressions
        - retrieve only data you need
            - performance increase 
                - up to 400% faster  ** 
                - up to 80% cheaper

    Glacier Select:  Similar to S3 Select but run against Glacier

# AWS Organizations and Consolidated billing

AWS Organizations: account management service that enables you to consolidate multiple AWS accounts 
    into an organization to centally manage. 
    Accounts under organization unit under ROOT  with policies at the OU and account
OU = Organizational Unit

{Organization}
---------------
[Policy]    [ROOT]          
      |   /        \   +---[Policy]              [Policy]
     [OU]           \  |                            /
    /    \           [OU]----------------------+   /       
[Account]  \           |                       |  /
             [OU]    [Account]                [OU]---------+
           /      \                          / |           |
     [Account]    [Account]         [Account] [Account] [Account]      

Consolidated Billing: 
    - Paying account (cannot access sub resources) linked to AWS accounts


                        +------[Test/Dev]
                        |
    [Paying Account] ---+------[Production]
                        |
                        +------[Back Office]

Consolidates usage for volume discounts

- Root Account should always have MFA
- Paying account should be for billing only 
    - do no deploy resources to paying account
- Service Control Policies on OU or individual account  **
    - enable / disable AWS Services


# Share S3 Buckets Across Accounts
    - 3 ways to share S3 Buckets across acounts  **
        1. Bucket Policies and IAM
            - across the entire bucket
            - programatic access only
        2. Bucket ACLs and IAM 
            - individual objects
            - programatic access only
        3. Cross-account IAM Roles
            - programatic access 
            - console access 

IAM > Roles > Create Role
    - Another AWS Account
    - Attach permission policies to role
        i.e. AmazonS3FullAccess
    - Role Name > Create Role

NOTE:  Give this link to users who can switch roles in the console   **
    user logs in an clicks "Switch Role" under id or use link


# Bucket replication
S3 > buckets > bucket > Replication Rule > Create Replication Rule

NOTE: Source and replicated buckets need to be versioned !! **
    - Detele markers are not replicated 
    - Permissions on source bucket will replicate across regions

# S3 Transfer Acceleration
    - utilizes CloudFront Edge Network to accelerate uploads
        - use distinct URL to upload to edge location which is then transfered to S3


# DataSync
    - move large amounts of data to AWS
    - AWS DataSync Agent  (on prem)
    - locally connects to NAS or SMB filesystem
        - copy to AWS 
        - write from AWS 
    - Connects to AWS Services: 
        - S3
        - EFS
        - FSx for Windows File Server
    - Hourly, daily or weekly
NOTE: can replicate EFS to EFS 


# CloudFront
 - Content Delivery Network
    - pushes contact to local Points of Presence
    - Edge Location:  where content is cached
        - Can Read and Write to Edge Locations
    - Origin       :  Origin of all files distributed via ECN
        - bucket
        - ec2 instance 
        - ELB
        - Route 53
    - Distributon  :  Name of the CDN
        - collection of Edge Locations

    - Can deliver:
        - Static
        - Dynamic
        - Streaming
        - Interactive content

    - Objects cached for the TTL (Time To Live) 

    Web Distribution:  Used for websites
    RTMP :  Media Streaming

NOTE: Can clear cached objects, will be charged


Can restrict access via signed URLs or signed cookies

Domain Name created for Cached Content
i.e. https://d16s698dkl8k6u.cloudfront.net

https://d16s698dkl8k6u.cloudfront.net/README.txt

NOTE:  can invalidate the Distribution:  CloudFront > Distributions > Invalidations


# CloudFront Signed URLs and Cookies

    - Signed URLs  :  1 file   = 1 URL
    - Signed Cookie:  1 cookie = multiple files


Attach policy to 
    - URL Expiration
    - IP Ranges
    - Trusted Signers (which AWS accounts can create signed URLS)


Origin Access Identity (OAI):  
    - users access CloudFront which then access S3 bucket via OAI 


CloudFront SDK generates Signed URL

    - key pari of Signed URL is account wide (managed by ROOT)

S3 Signed URL 
    - request as IAM user who creates presigned URL 
    - limited lifetime

Origin is EC2 use CloudFront
Origin is S3  use S3 Signed URL


# Snowball
    - Petabyte scale data transport solutions 
    - import / export to S3
    - secure appliances to transfer large amounts of data into / out of AWS
        - addresses high network costs
        - long transfer times
        - security
        - 1/5th cost of high speed Internet

50TB / 80TB
    - 256 bit encryption
    - Trusted Platform Module
    - Once transferred, AWS wipes

Snowball Edge 
    - 100TB onboard storage and compute
    - can use lambda functions
    - applications can run when can't access cloud
    - portable AWS

Snowmobile 
    - Exabyte-scale data transfer
    - 100 PB per Snowmobile (45ft trailer)



# Storage Gateway
    - services that connects on prem software appliance with cloud storage.
    - secure integration between onprem and AWS storage
    - can be software or physical device
    - download as virtual machine
        - VMWare ESXi
        - Microsoft Hyper-V

3 Types: 
    File Gateway  :  NFS & SMB     (files)
        - files stored as S3 objects 
        - access ad NFS mount
        - perms / timestampes are S3 metadata

    Volume Gateway:                 (drive images)
        - iSCSI
        - stored volumes
            - store primary data locally 
            - async backups to AWS
            - backup to S3 as EBS snapshots  (1GB - 16 TB)  **
        - cached volumes
        - asynchronouse backup as point-in-time snapshots (deltas)
        - stored as EBS snapshots

        - cached volumes
            - use S3 as primary data storage
            - frequently accessed data is stored locally
                - caches frequently used data
            - upto 32 TB volumes and attach as iSCSI
                - 1GB to 32 TB

    Gateway Virtual Tape Library  :
        - VTL (Virtual Tape Library)
        - media changer and tape drives preconfigured
        - backup applicatons can use
        - virtual tapes to S3

# Athena vs Macie

Athena:
    - Query S3 data with standard SQL
    - Serverless
    - Pay per query / per TB scanned
    - query log files
    - reports off of S3
    - query clickstream data

Macie:
    - Security services that uses ML / NLP to discover sensitive data in S3 
    - Uses AI to check if S3 has senstivie data, PII
    - dashoboard, reports, alerts
    - analyze CloudTrail logs
    - PCI-DSS use case / prevent ID theft

S3 & IAM Summary

IAM: 
    - Users
    - Groups
    - Roles
    - Policies
    - Universal, not region specific
    - Root Account has Admin
    - New Users 
        - have NO permissions
        - Assigned Access Key and Secret Access Keys  (view once)

S3:
    - Object based
    - 0 Bytes to 5 TB
    - Universal name space, globally unique
    - HTTP 200: upload successful
    - Bucket Policies: across all objects in Bucket
    - ACL: individual objects (files)
    - Can be setup to generate access logs
    - Attributes: 
        - Key
        - Value
        - Verison ID
        - Metadata
        - Subresources:
            - ACL / torrents
    - Consistency: 
        - Read after Write for PUTS new Objects
        - Eventual consistency for overwrite PUTS / Deletes
    S3 Standard    
    - Availability 
        - 99.99   (4 9's)
    - Durability:  
        - 99.999999999 (11 9's)
    S3 IA: Infrequently Accessed / less frequent / rapid access
    S3 IA One Zone:  just 1 AZ
    S3 Intelligent Tiering :  Mchine learning to migrate data to cost-effective tier
            - no performance impact or operational overhead
    S3 Glacier:  Low cost data archival / retrieval minutes to hours
    S3 Glacier Deep Archive: Archival, retrieval up to 12 hours
        - lowest cost storage class

    Cost hierarchy: 
        - S3 Std
        - S3 IA
        - S3 Intelligent Tiering
        - S3 One Zone - IA     NOTE: can lose your data
        - S3 Glacier
        - S3 Glacier Deep Archive

    Encryption In Transit: 
        - SSL / TLS


    Encryption At Rest: 
        - SSE - S3  Server Side Encryption
        - SSE - KMS utilizing Key Management Service
        - SSE - C: Customer Proided Keys 
        - Client Side Encryption

    Organization: 
        - bucket from one account to another
        - Server Control Policies:
            - on Organization Unit (OU) 
            - individual accts


    Share S3 Buckets across accounts
        - Bucket Policy & IAM
            - entire bucket
            - programmatic only
        - ACLs & IAM
            - individual objects
            - programmatic only
        - Cross Acount Roles 
            - programmatic 
            - console


Cross Region Replication 
    - Versioning MUST BE ON at source and target
    - existing files not replicated automatically
    - DELETE MARKERS ARE NOT REPLICATED
    - Delete individual versions will not be replicated

Lifecycle Policies:
    - Automate moving objects to different storage tiers
    - Can be used with versioning

S3 Transfer Acceleration
    - utilizes CDN 

CloudFront: 
    - CDN
    - Edge Location: location where content is cached
    - Origin:  origin of all content
        - S3, EC2, ELB, Route53
    - Distribution:  Name of CDN
    Types:
        - Web Distribution: web content
        - RTMP: Media Streaming
    Edge Locations can be read / write
    Objects cached for TTL

Snowball:
    - Disk appliance to move data in /out of S3
    - import to S3
    - export from S3


Storage Gateway:  agent installed on prem
    File Gateway  : flat files stored on S3

    Volume Gateway: iSCSI / disk volumes
        Stored Volumes: entire dataset stored on site and is asyn backed up to S3
        Cached Volumes: entire dataset on S3 and more frequently accessed is cached locally 

    Gateway Virtual Tape Library: backup to S3


Athena: 
    - query S3 using SQL
    - serverless
    - analyse log data in S3


Macie: 
    - uses ML / NLP / AI to idetnify PII in S3
    - analyze CloudTrail logs
    - dashboard, reports, alerts
    - PCI-DSS compliance


A Deny in a policy will override an Allow that user may have



## EC2 
- Elastic Cloud Compute: Virtual Machines in Cloud
     pricing:
        - on demand: fixed rate by the hour with no commitment

        - reserved : capacity reservation ata a discount on hourly charge (1 to 3 year terms)
                        - Standard Reserved: up to 75% off on demand
                        - Convertible Reserved: up to 54% on demand 
                                - can change instance types as long as instance is equal or greater value
                        - Scheduled Reserved: up to 54% on demand 
                                - time window of reservation
                                - match capacity to a recurring schedule

        - spot     : bid what you will pay for insance capacity
                        can lose instance at any time 

        - dedicated host: physical EC2 server dedicated for your use.
            - regulatory that does not allow multi-tenant virtualization
            - licensing the does not support cloud deployments
            - can be purchased on-demand (hourly)
            - purchased as reservation up to 70% off

EC2 Intances Mnemonic:  Fight Dr. McPixiez AU
F - FPGA
I - IOPS 
G - Graphics
H - High Thruoughput disk
T - T2 Micro (check general purpose)
D - Density
R - RAM
M - Main choice for general purpose apps
C - Compute
P - Graphics (think Pics)
X - Extreme Memory
Z - Extreme Memory and CPU
A - Arm-based workloads
U - Uhh Bare Metal


security group is a "virtual firewall"

Termination Protection turned off by default 

Root EBS volume will be default deleted when instance terminated
    - Root valume can be encrypted


# Security Groups

- firewall for a resource 
    - change to a security group rule takes place immediately
    NOTE: security groups are STATEFULL 
            - creating an inbound rule will allow for the corresponding outbound rule 
                i.e. HTTP / 80 IN will automatically allow HTTP / 80 OUT 

NOTE:  You can't block a particular port or IP address in a security group, can only do that with NACLs
       Security groups block everything by DEFAULT.

       NACLs are STATELESS, need to create both inbound and outbound rule

- can attach more than one security group to an EC2 instance

- All Inbound  traffic BLOCKED by default
- All Outbound traffic ALLOWED by default
- Security Groups are STATEFUL 
    - those allowed IN are also allowed OUT
- Cannot block specific ports or IP addresses using Security Groups
    - use Network Access Control Lists (NACLs)

- Can have any number of EC2 instances in a security group
- Can have multiple security groups attached to an EC2 instances 
- Can only specify "ALLOW" rules in a Security Group 
    - default of a SECURITY GROUP is to "DENY" everything


# EBS

- Elastic Block Store 
    - persistent block storage volumes for EC2 instances
        - virtual hard disk in cloud
    - automatically replicated within its Availability Zone

5 Types of EBS Storage:
    - General Purpose (SSD)
    - Provisioned IOPS (SSD)
    - Throughput Optimised Hard Disk Drive  (Physical Magnetic drive)
    - Cold Hard Disk Drive
    - Magnetic


             |---------------Solid State DrivesSSD ------------|----------------- Hard Disk Drives HDD --------------------|
Volume Type  |        General                 Provisioned      |  Throughput              Cold                  EBS        |
             |        Purpose SSD             IOPS SSD         |  Optimized SSD           HDD                   Magnetic   |
             |                                                 |                                                           |
Desc         |        general purpose          Highest         | Low Cost HDD             Low Cost HDD          previous   | 
             |balances price / performance     Performance SSD | freq access,             less freq             generation | 
             |wide variety of transactions     mission critical| thruput intensive        accessed workloads    HDD        |
             |                                                 |                                                           |
             |                                                 |                                                           |
Use Cases    |  most work loads               Databases        | Big Data &               File Servers        Infreq access|
             |                                                 | Datawarehouses                                workloads   |    
             |                                                 |                                                           |
API Name     |         gp2                       io1           |     st1                    sc1                 standard   | 
             |                                                 |                                                           |
Volume Size  |      1 GB - 16 TB              4 GB - 16 TB     | 500 GB - 16 TB           500 GB - 16 TB       1GB - 1 TB  |
             |                                                 |                                                           |
Max IOPS /   |        16,000                    64,000         |     500                      250               40 - 200   |
Volume       |---------------Solid State DrivesSSD ------------|----------------- Hard Disk Drives HDD --------------------|





# EBS Volumes and Snapshots

- EBS and EC2 instances are in the same AZ

- root EBS volumes destroyed when instance is destroyed
    - attached non-root volumes persist when instance terminated

- can change size of drive on the fly (have to extend file system to get the additional storage)

- can change the volume type (ex. gp3 to iop) on the fly

Exam question:  how to move volume and ec2 instance to another AZ
    > volumes > select volume > create snapshot

    > created snapshot > create image
        NOTE: set Virtualization Type as "Hardware-assisted virtualization"
             Allows for greater selection of EC2 instance types

Once image is created:
    > AMIs > select created image >  Launch > choose new AZ to spin up into

NOTE: 
    AMI > copy AMI to a different region

Snapshots exist on S3
Snapshots are point in time copy of volumes
Snapshots are incremental 
    - only blocks that have changes since last snapshot are moved to S3

Can create AMIs from snapshots


# AMI Types (EBS vs Instance Store)

AMI factors: 
    - Region
    - OS
    - Architecture (32-bit or 64-bit)
    - Launch Perms
    - Storage for Root Device (Root Dev Vol)

    - Instance Store (Ephemeral Storage)
        - root device is instance store volume created from template stored in S3
        NOTE: instance store restricts type of instance types
                can only reboot or terminate in instance store ec2 instance 
                CANNOT STOP instance store e2c instance 
                If you stop instance store you will lose all data on that instance (EPHEMERAL storage)

    - EBS Backed Volumes
        - root device created from an EBS snapshot
        - EBS instance can be stopped without losing data
    
    Can reboot both Instance Store and EBS Backed Volumes wihout losing data

    Can keep EBS volume after termination, Instance Store loses all data

ENI vs ENA vs EFA 

ENI - Elastic Network Interface
     virtual network card 

EN  - Enhanced Networking  / Enhanced Networking Adapter
    Single root I/O virtualization  (SR-IOV)
    high performance netwoking on supported instance types 
    NOTE:  ENA is a subset of Enhanced Netowrking

EFA - Elastic Fabric  Adapter
    network device than can attached to EC2 instance to accelerate 
    High Performance Computing (HPC) and Machine Learning apps


ENI: virtual network card 
    - primary private IPv4 address from IPv4 address range
    - One or more secondare private IPv4 address from IPv4 address range
    - One Elastic IP address (IPv4) per private IPv4 address 
    - One public IPv4 address
    - One or more IPv6 addresses
    - One or more security groups
    - One MAC address
    - source / destination check flag
    - description

    - create a management network (separate traffice)
    - use network and security applianced in VPC
    - dual-homed instances with workloads / roles on distinct subnets
    - low budget, high availability solution


EN: Enahcned Networking 
    - single root I/O virtualization (SR-IOV)
        SR-IOV device virtualization provides hight I/O and lower CPU utilization 
         compared to traditional virtualized network interfaces

    - higher bandwidth, higher packet per second (PPS) performance, 
      lower inter-instance latencies.  
      NOTE: No additional changed for using enhanced networking
      user for good networking performance

    Depending on Instance type, enhanced networking enabled by: 

    Enhanced Network Adapter (ENA)  up to 100Gbps
    or
    Intel 82599 Virtual Function (VF) interface, supports up to 10 Gbps
     (older instances)


EFA: Elastic Frabric Adapter
    network device attach to EC2 instance to accelerate HPC and ML
    provides lower and more consistent latency and higher thruput than TCP transport
    EFA can us OS-bypass.  
        Allows apps to bypass OS kernel and communicate directly with EFA device
            (only Linux)


Encrypted Root Device Volumes & Snapshots

How to create an encrypted image from unencrypted volume

bring up ec2 instance > volumes > create snapshot:  my_unencrypted_snap 

snapshots > copy my_unencrypted_snap > 
    - check Encrypt this snapshot 
    - default key
        > my_encrypted_snap


snapshots > select  my_encrypted_snap  > create image > my_encrypted_image

AMI > select my_encrypted_image > Launch Instance

NOTE:  
- Snapshots of encrypted volumes are encrypted automatically
- Volumes restored from encrypted snapshots are encrypted automatically
- Can share snapshots but only if they are unencrypted
- snapshots can be shared with other AWS accounts / made public
- Can NOW encrypt root device volumes upon creation of EC2 instance **


# Spot Instaces & Spot Fleets

Spot instance: 
 - take advantage of unused ec2 capacity with up to 90% discount of on-demand
     - can be used for stateless, fault-tolerage, flexible apps
       - containerized workloads
       - CI/CD, web servers, etc
       - image / rendering
       - HPC
       - analytics
    NOT GOOD FOR: 
       - persistent workloads
       - critical jobs
       - databases

 - decide on maximum spot price
    - instance provisioned as long as spot price is below your maximum spot price

 - hourly spot price varies hourly 

 - if spot price goes above your maximum, have 2 minutes to choose whether 
    to stop or terminate your instance

 - Spot block, stop spot instances from being terminated even if the spot price is 
    over your max spot price.   Spot Blocks only for 1 to 6 hours **



Spot Instance Termination 


                                                     +------below spot price ----> request failed
                                                     |
create requet -> [ Spot Request ]   -----------------+        +--------- stop ------+  
                   - max price                       |        v       (persistent)  |
                                                     |      start                   |
                   - # of instances                  |   (persistent)  interrupt <--+
                   - launch specification            |        |        (persistent) |
                   - request type:                   |        v                     |
                        - one time                   +------Launch instance --------+  
                        - persistent                                                |
                   - valid from / to                                            Interrupt
                                                                                (one-time)

NOTE:  if the request is one-time
             then once the price crosses it is terminated
       if the request is persistent
            then once the price crosses it is stopped
            if price comes back down the instance is started again
               until it is interrupted


Spot Fleet
    - collection of spot instances 
        and on-demand instance

    - spot fleet attempts to launch the number of spot instances and 
       on demand instances to satisfy the spot fleet target capacity 
                spot instances + on demand instances == spot fleet target capacity

    - tries to match target capacity with price restraint

    - setup different launc pools 
        - define: instance type, OS, AZ
        - Can have multiple pools
            - fleet will determine best way to implement strategy
        - spot fleets will stop launching instances once you reach price threshold 
            capacity desire state

Spot Fleet Strategies:
    - capacityOptimized
        spot instances come from pool with optimal capcity         
        for the number of instances launching

    - lowestPrice
        spot instances come from pool with lowest price

    - diversified
        spot instances are distributed across all pools

    - InstancePoosToUseCount
        spot instances are distributed across the number of 
        spot instance pools specified.  Only valid with lowestPrice
            like diversified + lowestPrice


# EC2 Hibernate
 - OS told to perform hibernation (suspend-to-disk)
 - saves contents from RAM to EBS root volume
 - root volume and attached EBS volumes are persisted

starting out of hibernation:
    - root volume restored to previous state
    - RAM contents are reloaded
    - processes previously running are resumed
    - previously attached data volumes are reattached 
       instance retains its instance ID
    - boots instance faster
        - don't have to restart OS or Apps

good for:
    - long running processes
    - services that take a long time to initialize


NOTE:   Instance RAM must be less than 150 GB in size.    **
        Instance Families:  C3, C4, C5, M3, M4, M5, R3, R4, R5
        Available for: Windows, Amazon Linux 2 AMI, Ubuntu
        CANNOT BE HIBERNATED FOR MORE THAN 60 DAYS 

# CloudWatch

 - monitoring services to monitor AWS resources as well as apps
 - performance monitoring:
    - Compute
        - EC2 instances
        - Autoscaling groups
        - Elastic Load Balancers
        - Route53 Health check
    - Storage 
        - EBS Volumes
        - Storage Gateway
        - CloudFront
EC2:
    - CPU
    - Network
    - Disk 
    - Status Check

CloudTrail:
    - camera into your AWS environment
    - user and resource activity
    - records Management Console actions and API Calls
        - which users / accounts called AWS
        - source IP address 
        - when called

CloudWatch:  monitors performance
CloudTrail:  monitors API calls in AWS platform

CloudWatch:
    - every 5 minutes by default   **
    - can have 1 minute intervals 
    - can create alarms to trigger notifications 

NOTE: 
    CloudWatch about PERFORMANCE
    CloudTrail about AUDITING


Can create regional and global dashboards
Can create alarms
Can send logs to CloudWatch    
    - aggregate, monitor and store logs
Events: near real-time stream of system events 
    - respond to state changes in AWS resources


# AWS CLI

spin up an instance 
run: aws configure 
  > asks for access key and secret access key

aws s3 ls   

aws s3 mb s3://knotknull.really-stupid-bucket-name

Secret directory --v

cd ~/.aws


[ec2-user@ip-172-31-61-160 .aws]$ ls -l
total 8
-rw-------. 1 ec2-user ec2-user  30 Nov  9 17:40 config
-rw-------. 1 ec2-user ec2-user 116 Nov  9 17:40 credentials

[ec2-user@ip-172-31-61-160 .aws]$ cat credentials
[default]
aws_access_key_id = AK.................D
aws_secret_access_key = a.............................X

[ec2-user@ip-172-31-61-160 .aws]$ cat config
[default]
region =  us-east-1


# IAM / AWS Roles

https://aws.amazon.com/blogs/security/new-attach-an-aws-iam-role-to-an-existing-amazon-ec2-instance-by-using-the-aws-cli/
https://aws.amazon.com/blogs/security/easily-replace-or-attach-an-iam-role-to-an-existing-ec2-instance-by-using-the-ec2-console/



Roles allow to interact with AWS without keys, etc.

IAM > create role > 
    Trusted Entity type:  AWS Service
    Use Case :  EC2
    [NEXT]
    Add Perms Policies: 
    [x] AdminAccess
    [CREATE]


To add a role to an existing EC2 instance: 
    EC2 > instance > Actions > Security > Modify IAM Role
    Choose Role 
    [ Update IAM Role]


NOTES: 
    - Roles more secure than access keys
    - Roles easier to manage
    - Roles can be assigned to EC2 instance at console and CLI
    - ROLES ARE UNIVERSAL, use them in any region


# Bootstrap Scripts

EC2 > Launch an instance > 
.
.
.
Advanced Details > 
User Data

put in commands or upload a file


# Instance Metadata


get metadata from ec2 instance

Address to get meta data from: http://169.254.169.254
     - IPv6 http://[fd00:ec2::254]/latest/user-data

OLD WAY :     **
curl http://169.254.169.254/latest/user-data

http://169.254.169.254/latest/meta-data/
http://169.254.169.254/latest/dynamic/
http://169.254.169.254/latest/user-data



NEW WAY (2024) :     **
TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"` \
&& curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/user-data

NOTE:  The above gets an api token first and then makes a second call with the token to get the user data 
. get token first:
    TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"` 

use the TOKEN to call curl for metadata:

    curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/user-data


all of the metadata you can query 
    curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/metadata
    i.e. curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/metadata/hostname

ami-id
ami-launch-index
ami-manifest-path
block-device-mapping/
events/
hostname
iam/
identity-credentials/
instance-action
instance-id
instance-life-cycle
instance-type
local-hostname
local-ipv4
mac
managed-ssh-keys/
metrics/
network/
placement/
profile
public-hostname
public-ipv4
public-keys/
reservation-id
security-groups
services/

Dynamic info:

TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"` && curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/dynamic/instance-identity/document
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100    56  100    56    0     0   6901      0 --:--:-- --:--:-- --:--:--  7000
{
  "accountId" : "709596356054",
  "architecture" : "x86_64",
  "availabilityZone" : "us-east-1b",
  "billingProducts" : null,
  "devpayProductCodes" : null,
  "marketplaceProductCodes" : null,
  "imageId" : "ami-063d43db0594b521b",
  "instanceId" : "i-0a1f63ada50c5f1a7",
  "instanceType" : "t2.micro",
  "kernelId" : null,
  "pendingTime" : "2024-11-09T21:09:23Z",
  "privateIp" : "172.31.53.155",
  "ramdiskId" : null,
  "region" : "us-east-1",
  "version" : "2017-09-30"
}[root@ip-172-31-53-155 ec2-user]# 


# EFS

Elastic File System 
 - file system for EC2 instances
 - capacity is elastic, do not have to pre-provision
 - for linux based 
 - like EBS 
    - EBS can only be mounted by one machine
    - EFS volume can be mounted by several machines

- on prem can access EFS via DirectConnect
- 2 performance modes:
    - general purpose 
    - max i/o

- EFA IA (Infreq. Access)
    - cheaper instance

- data redundant across multiple AZs


NOTE: ensure NFS protocol has been added to inbound rule  of the security group for the instance mounting the EFS



Create EFS cluster 

to mount on EC2 

sudo mount -t efs -o tls fs-0655fd1617d986dbd:/ efs


- EFS supports NFS v4 
- only pay for storage used
- scale up to petabytes
- can support 1000s of concurrent NFS connections
- Data store across multiple AZs within a region
- Consistency:  Read after Write

# FSx for Windows and Lustre

FSx for Windows
 - fully managed native Microsoft Windows file system 
 - build on Windows Server
 - essentially a Windows File Server
    - can work with SQL Server, IIS, Active Directory, Sharepoint, etc.

            Windows FSx                                    EFS
     - Managed Windows Server that                      - A managed NAS filer for EC2 
     runs Windows Server Message Blocks                 instances based on NFSv4       
     (SMB)-based file services

    - Designed for Windows and Windows apps             - one of first network file sharing protocols
                                                        native to Unix and Linux  
    - Supports AD users, access control lists, 
    groups and security policies along with 
    Distributed File System (DFS) and replication


FSx for Luster 
 - fully managed file system that is optimzed for compute instensive workloads: 
    HPC, ML, etc.
 - 100s GBs / sec throughput 
 - millions of IOPS 
 - sub-second latencies
 - Can store data directly on S3

SMB == FSx for Windows


# EC2 Placement Groups 

 - A way to place EC2 instances 
 3 types of Placement Groups: 
    - Clustered Placement Group
    - Spread Placement Group
    - Partitioned 


Clustered Placement Group
 - grouping of instances within a single AZ
 - apps that need low network latency
 - high network throughput or both
NOTE: only certain instances can be launched in 
   to a Clustered Placement Group

Spread Placement Group (Opposite of Clustered)
 - group of instances that are each placed on distinct 
   underlying hardware
        - separate rack
        - separate network
        - separte power
  i.e. if a rack fails, only that instance fails      
 - apps that have a small number of critical instances 
    that should be kept separate from each other
 - Individual Critical Instances
 - can be in different AZs in one region


Partitioned Placement Groups (Similar to Spread )
 - each group divided into logical segments (partitions)
 - each partition within a placement group  has its own set of racks
 - each rack has own network and power source
 - no 2 partitions within placement group share same racks

multiple instances per partition
     i.e. HDFS, HBash, Cassandra


Name of placement group must be unique within AWS Account
Only certain types of instances can be launched in placement group 
    - Compute Optimized 
    - GPU, Memory Optimized   (COGMOS)
    - Storage Optimizes

AWS recommends homogenous instances within clustered placement groups

Can't merge placement groups 

Can move an instance into a placement group 
    - must be in stopped state 
    - can move or remove and instance via CLI or SDK (not console, is this still correct ?)



# HPC on AWS

used in: genomics, financial risk modeling, weather prediction, etc

Data Transfer: How to get data into AWS
 - Snowball, Snowmobile
 - DataSync
 - DirectConnect 
    - cloud service solution to establish dedicated network connection 
    from on prem to AWS.  Private connectivity between office, data center, colo, etc.
    to AWS
    - can reduce costs
    - increase bandwidth throughput
    - dedicated line from on prem to AWS

Compute 
    - EC2 GPU / CPU Optimized
    - EC2 fleets (Spot intaces or Spot fleets)
    - Placement Groups

Network:
    - Enhanced Netowrking  (SR-IOV) Single Root I/O virtualization
    - Elastic Network Adapters (100 Gbps)
    - Elastic Fabric Adapters

EBS:
    - Scale up to 64k IOPS w/ Provisioned IOPS
    - Instance Store: scale to millions of IOPS, low latency

Network Storage:
    - S3 : Distributed object store, not a file system
    - EFS: Scale IOPS based on total size, use Provisioned IOPS
    - FSx for Lustere: Scale IOPS based on total size, use Provisioned IOPS

Orchestration & Automation 
 - AWS Batch
    - run 100ks of batch computing jobs
    - supports multi-node parallel jobs, 
        - single job that spance multiple EC2 instances
    - schedule jobs and launch EC2 instances as needed

 - AWS Parallel Cluster 
    - open source cluster management tool
        - easy to deploy HPC clusters 
    - text file to model to provision resources
    - automate creation of VPC, subnet, cluster type and instance types

# AWS Web Aplication Firewall (WAF)
    - monitor HTTP / HTTPS requests that are forwarded to 
        - CloudFront
        - Application Load Balancer
        - API Gateway

    - control access to content
    - Layer 7 aware firewall

    - can scan query string parameters

    - can configure conditions as 
        - what IP addresses are allowed to make request 
        - what query string parameters are needed to be passed for request to be allowed

    - CloudFront, API Gateway, App Load Balancer will allow it 
      or give HTTP 403 status code

WAF allows 3 Types of Behaviors:
    - allow all requests except ones specified
    - block all requests except ones specified
    - count the requests that mtch the properties specified

Protects against web attacks using conditions specified
Define conditions by using characteristics of web requests:
    - IP addresses that requests originiate from
    - Country that requests originiate from
    - Valaues in request headers
    - Strings that appear in requests, 
        - specific strings
        - strings that match regex patterns
    - Length of requests
    - SQL code that could be SQL injections
    - Presence of a script that is likely to be malicious 
        - cross-site scripting

# EC2 Summary

EC2: 
 - If Spot Instance is terminated by EC2, you will not be charged for partial hour of usage.
 - Fight Dr McPxz AU
 - Termination Protection is turned off by default

EBS: 
Root EBS volume deleted by default on termination 
 - Root EBS volume can be encrypted
 - additional volumes can be encrypted
 - snapshots exist on S3
    - point in time copies of volume
    - incremental
 - can create AMIs from volumes or snapshots
 - can change EBS volume size and storage types
 - ALWAYS in same AZ as EC2 instance

HOWTO: MOVE EC2 Volume to another AZ
    - take snapshot
    - create AMI from snapshot
    - launch AMI to new AZ

HOWTO: MOVE EC2 Volume to another Region
    - take snapshot
    - create AMI from snapshot
    - copy AMI to target region
    - launch from AMI in target region

NOTE: Can create snapshot that can be used to create EBS Volume in different AZ
      Can create snapshot that can be used to create EBS Volume in different Region

Security Groups
 - All Inbound traffic is blocked 
    - inbound traffic  is automatically allowed out
 - All Outbound traffic is blocked 
 - SGs are STATEFUL
 - multiple ec2 to an SG
 - multiple SG  to an ec2
 - cannot block specific IPs 
    - use NACLs
 - only allow rules 
    - no deny rules

Encryption:
    - snapshots of encrypted volumes are automatically encrypted
    - volumes restored from encrypted snapshots are encrypted automatically
    - Can share unencrypted snapshots ONLY

HOWTO: Encrypt Root Volume that is unencrypted
    - take snapshot of root device volume
    - copy snapshot and select encrypt option
    - create AMI from encrypted snapshot
    - launch new AMI instances with encrypted root volume


Instance Store: 
    - Ephemeral Storage (can lose data)
    - CANNOT BE STOPPED, if so lose daata
    - Can reboot and not lose data

Enhanced Networking 
    - Elastic  Network Interface (ENI)
    - Enhanced Network Adapter   (EN / ENA)
    - Enhanced Fabric  Adapter   (EFA)

CloudWatch 
    - Monitors (WATCHES) performance
        - monitors AWS and apps running on it
    - Default every 5 minutes
    - Dashboards, Events, Alarms, Logs  (DEAL)  

    CloudTrail == Auditing

Roles: 
    - more secure than acckey
    - can be assigned to instance after creation
    - UNIVERSAL (any region)

Metadata 
    169.254.169.254/latest/meta-data
    169.254.169.254/latest/user-data   << Bootstrap Script

    Version 2 needs a token to be passed to metadata URL
        get token first:
            TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"` 
        use the TOKEN to call curl for metadata:
            curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/user-data


Placement Groups
    - Clustered     (close together, same rack) 
            - low latency / high thruput
            - SAME AZ
            - homogenous instances 

    - Spread        (spread apart, guaranteed not on same rack) 
            - critical instances
            - can span AZs 
            
    - Partitioned   (hybird: instances close together on partitions, partiions spread apart)
            - Multiple EC2 instances: HDFS, HBase, Cassandra
            - can span AZs 

NOTE:   can't merge placement groups
        YOU CAN move existing instance into placement group  


LAB: Using Tags and Resource Groups

Tag Editor:
    - Tag multiple different types of resources using the same tags  i.e. Env=QA or Acct=112233

AWS Config:
    - can utilize rules to determine if resources are in compliance with configuration rules

LAB: EC2 Roles and Instance Profiles

IAM Role:  "what you can do"

Instance Profile:
    - can associate a role with an EC2 instance, this is what an Instance Profile is for
    - entity or container (?) connect an IAM Role to an EC2 instance
    - IAM Role  is       : "what can I do i"
    - Instance Profile is: "who am i"

- Provide Temporary Credentials that are rotated automatically

NOTE: when you create a ROLE and ATTACH to an EC2 Instance via Management Consol, 
   the creation and use of Instance Profile is handled behind the scenes 

Trust Policy: allows EC2 service to assume role  

1. Create policy trust_policy_ec2.json: 
{
  "Version": "2012-10-17",
  "Statement": [
    {
       "Effect": "Allow",
       "Principal": {"Service": "ec2.amazonaws.com"},
       "Action": "sts:AssumeRole"
    }
  ]
}

2. Create Role 

aws iam create-role --role-name DEV_ROLE --assume-role-policy-document file://trust_policy_ec2.json

OUTPUT:  
{
    "Role": {
        "Path": "/",
        "RoleName": "DEV_ROLE",
        "RoleId": "AROAT537H4KBEDHTOPKOH",
        "Arn": "arn:aws:iam::270312923778:role/DEV_ROLE",
        "CreateDate": "2024-11-10T21:40:42+00:00",
        "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": {
                        "Service": "ec2.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                }
            ]
        }
    }
}

NOTE: Role created with Assume Role policy attached 


3. Grant role read access to S3 Buckets, need to create policy that allows this

Create S3 Access Policy document  dev_s3_read_access.json 

{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "AllowUserToSeeBucketListInTheConsole",
      "Action": [
        "s3:ListAllMyBuckets",
        "s3:GetBucketLocation"
      ],
      "Effect": "Allow",
      "Resource": [
        "arn:aws:s3:::*"
      ]
    },
    {
      "Effect": "Allow",
      "Action": [
        "s3:Get*",
        "s3:List*"
      ],
      "Resource": [
        "arn:aws:s3:::<DEV_S3_BUCKET_NAME>/*",
        "arn:aws:s3:::<DEV_S3_BUCKET_NAME>"
      ]
    }
  ]

}

NOTE:  <bucket_name>/*   allows get / list to objects within the bucket
NOTE:  <bucket_name>     allows get / list to just the bucket

4. create the managed policy: 

aws iam create-policy --policy-name DevS3ReadAccess --policy-document file://dev_s3_read_access.json

OUTPUT: 

{
    "Policy": {
        "PolicyName": "DevS3ReadAccess",
        "PolicyId": "ANPAT537H4KBAQK4ATMNH",
        "Arn": "arn:aws:iam::270312923778:policy/DevS3ReadAccess",
        "Path": "/",
        "DefaultVersionId": "v1",
        "AttachmentCount": 0,
        "PermissionsBoundaryUsageCount": 0,
        "IsAttachable": true,
        "CreateDate": "2024-11-10T21:53:53+00:00",
        "UpdateDate": "2024-11-10T21:53:53+00:00"
    }
}

5. Attached managed policy to Role

aws iam attach-role-policy --role-name DEV_ROLE --policy-arn "<DevS3ReadAccess_POLICY_ARN>"


list attached policies of role (DEV_ROLE)
 aws iam list-attached-role-policies --role-name DEV_ROLE
OUTPUT: 
{
    "AttachedPolicies": [
        {
            "PolicyName": "DevS3ReadAccess",
            "PolicyArn": "arn:aws:iam::270312923778:policy/DevS3ReadAccess"
        }
    ]
}


6. create instance profile

aws iam create-instance-profile --instance-profile-name DEV_PROFILE

OUTPUT:
{
    "InstanceProfile": {
        "Path": "/",
        "InstanceProfileName": "DEV_PROFILE",
        "InstanceProfileId": "AIPAT537H4KBAN4X7PAWO",
        "Arn": "arn:aws:iam::270312923778:instance-profile/DEV_PROFILE",
        "CreateDate": "2024-11-10T22:19:57+00:00",
        "Roles": []
    }
}


7. add role to  instance profile
aws iam add-role-to-instance-profile --instance-profile-name DEV_PROFILE --role-name DEV_ROLE


8.  Verify instance profile
aws iam get-instance-profile --instance-profile-name DEV_PROFILE


{
    "InstanceProfile": {
        "Path": "/",
        "InstanceProfileName": "DEV_PROFILE",
        "InstanceProfileId": "AIPAT537H4KBAN4X7PAWO",
        "Arn": "arn:aws:iam::270312923778:instance-profile/DEV_PROFILE",
        "CreateDate": "2024-11-10T22:19:57+00:00",
        "Roles": [
            {
                "Path": "/",
                "RoleName": "DEV_ROLE",
                "RoleId": "AROAT537H4KBEDHTOPKOH",
                "Arn": "arn:aws:iam::270312923778:role/DEV_ROLE",
                "CreateDate": "2024-11-10T21:40:42+00:00",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ec2.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                }
            }
        ],
        "Tags": []
    }
}


9.  Attach DEV_PROFILE Role to Instance

aws ec2 associate-iam-instance-profile --instance-id <LAB_WEB_SERVER_INSTANCE_ID> --iam-instance-profile Name="DEV_PROFILE"
OUTPUT:
{
    "IamInstanceProfileAssociation": {
        "AssociationId": "iip-assoc-02f68d9cfc4fc2372",
        "InstanceId": "i-0481fe9257d238059",
        "IamInstanceProfile": {
            "Arn": "arn:aws:iam::270312923778:instance-profile/DEV_PROFILE",
            "Id": "AIPAT537H4KBAN4X7PAWO"
        },
        "State": "associating"
    }
}



10. Verify config of web server 

aws ec2 describe-instances --instance-ids <LAB_WEB_SERVER_INSTANCE_ID>
OUTPUT: 
.....
                    "IamInstanceProfile": {
                        "Arn": "arn:aws:iam::270312923778:instance-profile/DEV_PROFILE",
                        "Id": "AIPAT537H4KBAN4X7PAWO"
                    },


https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html
https://aws.amazon.com/iam/faqs/
https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2_instance-profiles.html
https://aws.amazon.com/tools/
https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html
https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html#config-settings-and-precedence
https://boto3.amazonaws.com/v1/documentation/api/latest/guide/configuration.html
https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html



TEST 

- Cannot delete the snapshot of a root device of an EBS volume used by a registered AMI
- can detatch an additional EBS (non-root volume)
- Hypervisors for EC2:  XEN, Nitro
- Standard Reserviced instances cannot be moved between regions
- which ec2 feature uses SR-IOV?    Enhanced Netowrking
- Cheapest EBS options are always HDD over SDD !!!!
- Changes to IAM policies take effect almost immediatly
    - IAM Policy exists in AWS API and not on instance itself
- IP Address to retrieve instance meta-data or user-data:  http://169.254.169.254
- Spread placement groups can be deployed across Availability Zones
- IAM Roles an be attached to instances in stopped or running state or 
   replaced for instances in the running state
- You can control whether an EBS root volume is deleted when its associated instance is terminated.
   By default, the DeleteOnTermination attribute for root volumes is set to 'true.' 
- which AWS cli command shouldI use to crate a snapshot of an EBS volume: 
    aws ec2 create-snapshot 


## Databases on AWS

AWS RDBMS (RDS):
    - SQL Server
    - Oracle
    - MySQL
    - PostgreSQL
    - Aurora
    - MariaDB

2 Key Features: 
- Multi-AZ for Disaster Recovery 
- Read Replicas - Performance

Multi-AZ
 - AWS points DNS for RDS instance to an IP, 
    fail over points DNS to second IP 
 - failovers automatic with Multi-AZ


Read Replicas
 - write to primary db is replicated to Read Replica
 - No automatic fail over
 - can have 5 read replicas


DynamoDB:
 - NoSQL
 - Collection holds Documents, key - value pair
 -  Document can have different fields

Data Warehousing:
OLTP vs OLAP

Redshift (OLAP): 
- Amazon Data Warehouse:  

ElastiCache:
- web service for in-memory cache in cloud 
- improves web app performance by caching to in-memory
- 2 open source in-memory caching engines
     - memcached
     - redis


## RDS LAB

connectivity endpoint: map-sql-db.cjy7mdwejhd4.us-east-1.rds.amazonaws.com
- RDS runs on virtual machines 
    - can't login to RDS VMs 
- RDS patching OS and DB is Amazon's responsibility
- RDS is NOT SERVERLESS

bootstrap: 

#!/bin/bash
yum install amazon-linux-extras httpd -y 
amazon-linux-extras install php7.2 -y
yum install httpd -y
systemctl start httpd
systemctl enable httpd
cd /var/www/html
wget https://wordpress.org/latest.tar.gz
tar -xzf latest.tar.gz
cp -r wordpress/* /var/www/html/
rm -rf wordpress
rm -rf latest.tar.gz
chmod -R 755 /var/www/html/*
chown -R apache:apache /var/www/html/*

NOTE: THIS DID NOT WORK !!!  PHP was not running

# RDS Backups, Multi-AZ, Read Replicas

2 types of backups: 
    - automated backups 
        - allow you to recover db to any point in time within a retention period
            - retention period between 1 and 35 days
        - takes full daily snapshot and stores transaction logs through out day.
        - On recovery, AWS will frst choos most recent daily backup and apply transaction logs
        - enabled by DEFAULT
        - stored to S3  / free storage space equal to size of DB. 
        - backups taken within a defined window
        - during backup window, storage I/O may be suspended while your data is being backed up 
            - may experience latency 

    - snapshots
        - DB Snapshots are done manually (user initiated)
        - They are stored even after you delete the original RDS instance

when you restore, the restored version of DB will be a new RDS instance with new DNS endpoint

Encryption: 
    - encryption at rest supported for MySQL, Oracle, SQL Server, PostgreSQL, MariaDB, Aurora **
    - done via KMS
    - once RDS instance is encrypted, data stored at rest in the underlying storage is encrypted
        - backups, read replicas and snapshots are also encrypted

Multi-AZ: 
    - exact copy of Prod DB in another AZ
    - All writes hitting Prod DB synchronized to other AZ
        - AWS handles syncing
    - if database maintenance, or DB or AZ Failure, RDS fails over to standby 
        - no admin intervention
        - it updates URL to backup
    - for DR only, NOT USED FOR PERFORMANCE
    - available for SQL Server, Oracle, MySQL Server, PostgreSQL, MariaDB **


Read Replica: 
    - main DB asyncronously replicated to multiple instances
        - can read from either replica and write to Prod DB
    - can have Read Replicas of Read Replicas (watch for latency)
    - available for SQL Server, Oracle, MySQL Server, PostgreSQL, MariaDB, Aurora **
    - Used for PERFORMANCE NOT DR
    - Must have automatic backups turned on to deploy read replica
    - up to 5 read replicas copies of any db
    - each Read Replica will have its own DNS end point
    - can have Read Replicas that have multi-AZ 
    - can create Read Replicas of Multi-AZ source databases.
    - Read Replicas can be promoted to be their own databases (breaks replication)
    - Can have Read Replica in second region

RDS Backups, Multi-AZ, Read-Replicas LAB
    - modify database to be Multi-AZ
    - reboot w/ failover causes the backup to become primary

NOTE: Need to have backups turned on before creating Read Replicas **

Multi-AZ: 
 - can force a failover from one AZ to another by rebooting RDS instace


# DynamoDB 
    - NoSQL solution
    - single digin ms latency 
    - fully managed db
    - supports document and key-value
    - flexible data model ideal for 
        - mobile, web 
        - gaming, ad-tech
        - IoT, etc


    - Stored on SSD
    - spread across 3 geographically distinct data centers **
    - Eventually Consistent Reads (Default)
        - consistency across all copies of data usually reached within 1 second 
        - Best Read Performance
    - Strongly Consistent Reads
        - returns result that reflects all writes that received a successful respons 
          prior to the read ( less than 1 second)
        - if update is done and need to read that update in less than 1 second

# Advanced DynamoDB 
DynamnoDB Accelerator (DAX)
    - fully managed, highly available in-memory cache
    - 10x performance improvement
    - Reduces request time from milliseconds to microseconds
    - don't need to manage caching logic
    - Compatible with DynamoDB API calls

    [ Application ]  <------>  [ DAX ] <------>  [ DynamoDB ]

        - no change to application
        - DAX has write thru cache
        - High Availability, will failover to own replicat in another AZ


Transactions
    - Multiple "all or nothing" operations 
        - financial transactions
        - fulfilling orders
    - Two underlying reads / writes  **
        - prepare / commit 
    - Up to 25 items or 4 MB of data


On-Demand Capacity
 - pay-per-request pricing
 - balance cost / performance
 - no minimume capacity
 - no read/write charges when idle
    - only storage and backups
 - pay more per request than provisioned capacity
 - use for new product launces


On-Demand Backup and Restore
 - full backups at any time
 - zero impact on table performance / availability
 - consistent within seconds / retained until deleted
 - operates within same resion as the source table

Point-in-Time Recover (PITR)
 - protects against accidental writes / deletes 
 - restore to any point in the last 35 days
 - incremental backups
 - NOTE enabled by default  **
 - latest restorable: five minutes in the past


Streams: 
 - Time-ordered sequence of item-level changes in a table 
 - FIFO
 - stored for 24 hours
 - inserts, updates, deletes


stream record
  - single modification to Dynamo DB table
  - each stream record assigned squence number
  - stream record organized into groups / shards 
  - shard contains info on iterating thru records
  - combine with Lambda functions for functionality "like" stored procedures in traditional databases


                                    shard (group of stream records)
                                       |
            +--------------------------|-------------------------------------+  +
            |                   +------------+                               |  |
            |     [.][.][.][.]   [.][.][.][.]   [.][.][.][.]                 |  +-DynamoDB Stream
            |         ^                                                      |  |
            +---------|------------------------------------------------------+  +
                      +--- stream record 
              (representing an change to DyanamoDB table)



Global Tables 
Managed Multi-Master, Multi-Region Replication
 - globally distributed applications
 - based on DynamoDB strams
 - Multi-region redundancy for DR or HA
 - No application rewrite
 - Replication latency under 1 sec


Need to have DynamoDB streams enabled

Database Migration Service (DMS)
migrate from source to target

       Source                             Target
 (on-prem, EC2, RDS)                (on-prem, EC2, RDS)      
------------------------          ------------------------  
Aurora      MongoDB                 Aurora      Kafka
S3          MySQL               DocumentDB      MariaDB
MariaDB     Oracle                DynamoDB      SQL Server
AzureDB     PostgreSQL             Kinesis      MySQL
SQL Server  Sybase                Redshift      Oracle
DB2                                    S3       PostgreSQL
                             Elasticsearch      Sybase

- Data transformation logic in DMS
    - migration performed automatically
- Source database is operational during migration


Security
 - Encryption at Rest (KMS)
 - Site to Site VPN
 - Direct Connect (DX)
 - IAM policies and roles 
 - Fine-grained access
 - CloudWatch / CloudTrail
 - VPC endpoints to (private IPs) avoid publice internet 

# Redshift 

 - petabyte scale managed data warehouse
 - single node (160 GB)  **
 - multi-node
    - Leader  Node ( manages client connections and receives queries )
    - Compute Node 
        - store data 
        - perform queries / computations
        - up to 128 compute nodes

 - advanced compression
    - columnar data
        - column compression better than row compression
    - uses multiple compression techniques
    - doesn't require indexes / materialized views
    - when loading data into empty table 
        - Redshift analyzes data and selects appropriate compression scheme

 - Massively Parallel Processing (MPP)
    - distributes data and query loads across all nodes
    - can scale by adding nodes

 - Backups
    - eabled by default, 1 day retention period
        - max 35 days
    - attempts to maintain at least 3 copies of data
        - original and replica on compute nodes + one backup in S3
    - can asyncronously replicate snapshots to S3 in another region for DR

 - Priced 
    - Compute Node hours    
        - total number of hours you run all compute nodes for billing period
        - 1 unit per node per hour
            3 nodes * 24 hr * 30 days = 2160 incance hours            
        - not billed for leader node hours
    - Backup
    - Data Transfer 
        - only within a VPC / not outside it

 - Security
    - Encrypted in transit using SSL
    - Encrypted at rest using AES-256
    - Redshift hangles key management
    - Can manage own keys via: 
        - HSM  (Hardware Security Management)
        - KMS 

 - Availability
    - currently only available in 1 AZ
    - Can restore snapshots to new AZs in event of outage

# Aurora

 - MySQL and PostgreSQL compatible Relational DB engine 
    - combines speed of high-end commercial db
    - simplicity and cost-effectiveness of open source dbs

 - up to 5x better performance than MySQL 
 - up to 3x better performance than PostgreSQL 

Features: 
    - Start with 10 GB, scales in 10 GB increments to 64 TB  **
        (Storage is autoscaling )

    - Compute resources can scale to 32 vCPUs and 244 GB RAM **

    - 2 copies of data contained in each AZ   **
        - min 3 AZ ==>> 6 copies of data
   
Scaling:
    - can handle loss of up to 2 copies of data without affecting write availability **
    -      """   loss of 3 copies of data without  
    - Aurora storage is self-healing: 
        - data blocks / disks are scanned continuously for errors and repaired automatically

Replicas: **
 - Aurora Replicas     : 15
 - MySQL Read Replicas : 5
 - PostgreSQL Read Repl: 1

Feature Comparison  **
                                                Amazon Aurora Replicas              MySQL Replicas
Number of Replicas                                      up to 15                        up to 5
Replication Type                                       Asynch (ms)                      Asynch (sec)
Performance impact on primary                           Low                             High
Replica location                                        In-region                       Cross-Region
Act as failover target                                  Yes (no data loss)              Yes (potentially minuste of data loss)
Automated failover                                      Yes                             No
Support for user-defined rep delay                      No                              Yes
Support for different data or schema                    No                              Yes
   vs primary  


Backups: 
    - automated backups always enabled
        - backups DO NOT IMPACT db performance

    - can take snapshots of Aurora
        - snapshots DO NOT IMPACT db performance

    - can share Aurora Snapshots with other AWS accounts

Amazon Aurora Serverless: 
    - on demand, autoscaling config for 
        MySQL and PostgreSQL compatible edition of Amzaon Aurora
    - Serverless DB cluster: 
        -  automatically starts up / shuts down 
        -  scales cpacity up or down based on applications needs

    - simple, cost-effective option for infrequent, intermittent, unpredictable workloads
        - pay on a per invocation, not paying for idle resources 

Create Aurora read replica from MySQL 
 RDS > RDS Instance > Actions > Create Aurora read replica 

once available
  choose auroroa writer node and promote read replicat 
  NOTE:  you are taking a MySQL DB and copying to Aurora DB
 RDS > RDS Instance > Actions > Promote Read Replica


# Elasticache
 - web servcies for in-memory cache in cloud
 - improve performance of web apps
    - retrieve infor from fast in-memory cache
 - Supports to open source caching engines: 
    - memcached
    - redis

Comparison 

        Requiement                              Memcached           Redis        **
Simple Cache to offload DB                      Yes                 Yes 
Ability to scale horizontally                   Yes                 Yes 
Multi-threaded performance                      Yes                 No  
Advanced data types                             No                  Yes 
Ranking / Sorting data sets                     No                  Yes 
Pub / Sub capabilities                          No                  Yes 
Persistance                                     No                  Yes 
Multi-AZ                                        No                  Yes 
Backup & Restore Capabilities                   No                  Yes 


Redis is Mult-AZ
Backup and restores of Redis 


# Database Migration Service (DMS)
- migrate RDBMS, Data Warehouses, NoSQL to AWS Cloud 
    - between on-prem instances (AWS Cloud Setup)
    - compbinations of cloud and on-prem

- DMS is a server in AWS Cloud and runs replication software
    - create source (extract) and target (load) connections
    - schedule task that runs on server and moves data
    - DMS crates tables and associated primary keys
    - can pre-create target tables manually 
    - utilize AWS Schema Conversion Tool (SCT)
        - create somr or all of target tables, indexes, views, triggers, etc.


                  +-----------------------------------------------------------+
[ Source DB ] --> |                           AWS DMS                         |  --> [ Target DB]
                  | [source  ] -> [Replication Task    ] -> [target]          |
                  | [endpoint]    [Replication Instance]    [endpoint]        |
                  +-----------------------------------------------------------+
- Supports homogenous migrations (ex. Oracle to Oracle)
- Supports heterogeneous migrations ( MS SQL Server to Aurora)


Sources **                                          Targets
on-prem and EC2 instances:                      on-prem and EC2 instances: 
    - Oracle, Microsoft SQL Server                  - Oracle, Microsoft SQL Server
    - MySQL, MariaDB, PostgreSQL                    - MySQL, MariaDB, PostgreSQL
    - SAP, MongoDB, Db2                             - SAP
Azure SQL Database                              RDS 
Amazon RDS (including Aurora)                   Redshift
Amazon S3                                       DynamoDB
                                                S3
                                                Elasticsearch service
                                                Kinesis Data Streams
                                                DocumentDB


NOTE:  NEED Schema Configuration Tool for heterogeneous migration  
       DO NOT NEED SCT when migrating idential databases 



# Caching Strategies

- CloudFront
- API Gateway
- ElastiCache - Memcached and Redis
- DynamoDB Accelerator (DAX)


# EMR Overview
Elastic Map Reduce
    - cloud big data platform
    - used with 
        - Spark, Hive, HBase, Flink, Hudi, Presto 

- EMR cluster collection of EC2 instances i.e. node: 
    - different software on each node type 
    - like Apache Hadoop

Node Types: 
    - Master Node: manages cluster
        - tracks status of tasks
        - monitors healt of cluster
        - every cluster has a master node

    - Core Node: runs tasks and stores data in HDFS
        - multinode clusters have at least one core node

    - Task Node: runs tasks, DOES NOT STORE DATA
        - task nodes are optional

NOTE: Smallest cluster you can have is 1, that is a Master Node   **
      Every node can communicate with each other



Log data is store on /mnt/var/log on Master Node   **
    - can periodically archive log files on Master Node to S3 
    - EMR does this at 5 minute intervals
        - ONLY WHEN CLUSTER IS FIRST SETUP

# Database Summary


Read Replicas:
  - can be Multi-AZ  **
    - increase performance
  - Can be in different Regions **
  - MySQL, PostgreSQL, MariaDB, Oracle, Aurora, MSSQL
  - Can be promoted to master / breaks replication

Multi-AZ :
 - Used for DR ONLY / not performance
 - Force a failover by rebooting RDS instance

Encryption at res: 
  - MySQL, PostgreSQL, MariaDB, Oracle, Aurora, MSSQL
  - Uses KMS 

DynamoDB 
 - Serverless
 - Stored on SSD
 - Spread across 3 geo distinct data centers
 - Eventual Consistency Reads (Default) if data can be consistent > 1 sec
 - Strongly Consistency Reads if data had to be consistent < 1 sec

Redshift 
  - only in 1 AZ
  - backups enabled by default = 1 day retention
  - Attempts to keep 3 copies of data 
    - original 
    - replica on compute nodes 
    - backup in S3
  - Async replica snapshots to S3 in another region for DR

Auroroa 
    - 2 copies of data in each AZ with min 3 AZ == 6 total copies
    - auotmated backups turned on by default
    - share snapshots with other AWS accounts
    - 3 types of replicas 
        - Aurora Replicas  ( within same region = 15) 
        - MySQL replicas   (multiple regions = 5)
        - PostgresSQL      (only 1)



RDS Multi-AZ and Read Replica labs

wordpress.c9x6gz16a86n.us-east-1.rds.amazonaws.com
load-balancer-388667590.us-east-1.elb.amazonaws.com

Quiz:

New RDS Instance: automated backups enabled by default
Echeck for Error node in response from RDS API

DocumentDB has MongoDB compatability

Can crate RDS SQL Server max 16 TB

DynamoDB charges in a single region 
    - Read and Write Capacity
    - Storage of Data
    NOTE: no charge to data transfer within a single region, cross region is charged at both ends
            - no charge for local secondary indexes


I/O may be briefly suspended while the backup process initializes (typically under a few seconds), 
 and you may experience a brief period of elevated latency.

MySQL default port


3 data formats Athena supports 
    - Parquet, ORC, JSON


Data transferred between Availability Zones for replication of Multi-AZ deployments is free. 
Reference: Amazon RDS for MySQL Pricing: Data Transfer.

## Advanced IAM

# AWS Directory Service

- family of managed services
- Connect AWS resources with on-prem Active Directory
- Standalong directory in the cloud
- Use existing corporage credentials
- Can login to console with on prem AD credentials
- SSO to any domain-joined EC2 instance

Active Directory:
 - on prem directory service 
 - Hierarchical database of users, groups, computers -- trees and forests
 - group policies
 - based on LDAP and DNS
 - supports Kerberos, LDAP, NTLM authentication
 - Highly Available 

AWS Managed Microsoft AD

 - AD Domain Controllers running Windows Server
    - 2 domain controllers for high availability
 - Reachable by applications in you VPC
 - Add DCs for HA / Performance
 - Exclusive access to DCs
 - Extend existing AD to on-prem using AD Trust


Responsibilites

                AWS                                     Customer
    - Multi-AZ deployment                     - Users, groups, Group Policy Object
    - Patch, monitor, recover                 - Standard AD tools
    - Instance rotation                       - Scale out DCs 
    - Snapshot and restore                    - Trusts (resource forest)
                                              - Certificate authorities (LDAPs)
                                              - Federation

Simple AD 
 - Standalone managed directory
 - Basic AD features: 
    - Small <= 500
    - Large <= 5,000
 - Easier to manage EC2
 - Linux workloads that need LDAP
 - Does not support trust (can't join on-prem AD)

AD Connector 
 - use existing AD Directory with compatible AWS services
 - Directory gateway (proxy) for on-premises AD
 - Avoid caching info in the cloud
 - Allow on-prem users to log into AWS using AD      
 - Join EC2 Instances to your existing AD 
 - Scale across multiple AD Connectors


Cloud Directory 
 - Directory-based store for developers
 - Muliple hierarchies with hundreds of millions of objects
 - Fully managed service
Use Cases: 
    - org charts
    - course catalogs
    - device registries

Cognito User Pools 
 - Managed user directory for SaaS applications
 - sign-up and sign-in for web or mobile
 - works with social media identies 
    i.e. facebook, gmail, etc.


 Active Directory Compatible               NOT  Active Directory Compatible
    - Manged Microsoft AD                   - Cloud Directory 
    - AD Connector                          - Cognitor User Pools
    - Simple AD


# IAM Policies

Amazon Resource Name (ARN)
 - uniquely identifies any resource in AWS 
begin with:

 arn:partition:service:region:account_id:

partition: aws | aws-cn
    - aws
    - aws-cn == China  (probably include GovCloud)

service:
    i.e. s3 | ec2  | rds

Region:
    i.e. us-east-1 | eu-central-1

Account ID:
    i.e. 12 dig-it accountid 123456790012


end with: 
resource
resource_type/resource
resource_type/resource/qualifier
resource_type/resource:qualifier
resource_type:resource
resource_type:resource:qualifier


examples 

arn:aws:iam::123456789012:user/marc              << "::" means part of name skipped over, since IAM is global, there is no region hence "::"
arn:aws:s3:::my_awsome_bucket/image.png          << ":::" means 2 parts skipped, no region or account needed for globally unique s3 bucket name
arn:aws:dynamodb:us-east-1:123456789012:table/orders <<  dynamodb service, resource type (table), table name
arn:aws:ec2:us-east-1:123456789012:instance/*    <<  specifies all resources of a particular type



IAM Policy
 - JSON document that defines permissions
 - 2 types of policies:

    - Identity Policy: 
        - attached to IAM: user, group or role 
        - specifies WHAT and identity CAN DO
            i.e. permissions

    - Resource Policy: 
        - attached to a resource
            s3, ec2, KMS keys, etc.
        - specifies WHO has access to resource
              and   WHAT actions they can perform

- NO EFFECT until attached policy is attached to Identity or Resource

- Policy == List of statements
ex.
{
    "Version": "2012-10-27",
    "Statement": [          NOTE: square brackets are an array or list i.e. list of statements
        {                           each statement enclosed in curl braces {}
            ...
        },                  - each statement matches an AWS API request
        {
            ...
        },
        {
            ...
        }
    ]
}

{
    "Version": "2012-10-27",
    "Statement": [          
        {
            "Sid": "SpecificTable",
            "Effect":"Allow",
            "Action": [
                "dynamodb:BatchGet*",
                "dynamodb:DescribeStream",
                "dynamodb:DescribeTable*,
                "dynamodb:Get*",
                "dynamodb:Query",
                "dynamodb:Scan",
                "dynamodb:BatchWrite*",
                "dynamodb:CreateTable",
                "dynamodb:Delete*",
                "dynamodb:Update*",
                "dynamodb:PutItem"
            ],
            "Resource": "arn:aws:dynamodb:*:*:table/MyTable"
        }
    ]

}

Breakdown: 

Sid    :  "Human Readble Id for this Statement"   think statement name / desc
Effect :  either Allow or Deny                    think: allow / deny these actions on this resource
Action :  service name : action name              * wildcards: any API request that starts with that string i.e. dynamodb:Get* 
Resouce: ARN of resource                          Resource that the Action is against


mnemonic == SEAR (Sid, Effect (ALLOW|DENY), Action, Resource)


2 kinds of policies:
    - AWS Managed
    - Customer Managed

To create a policy:
IAM > policies > create > visual | JSON
ex.

{
    "Version": "2012-10-27",
    "Statement": [          
        {
            "Effect":"Allow",                       NOTE: Allow ListBucket on test bucket 
            "Action": ["s3:ListBucket"],
            "Resource": [arn:aws:s3:::test"]
        },
        {
            "Effect":"Allow",                       NOTE: Allow Put / Get / Delete on all objects under test/
            "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "s3:DeleteObject"
                ],
            "Resource": [arn:aws:s3:::test/*"]
        }
    ]
}
choose name / description of policy 


Create Role 
IAM > Role > Create Role 

Here you can select type of "trusted entity": AWS Service, AWS Account, Web Identity, SAML

ex. 

select AWS Service > EC2 > [NEXT: Permissions] 
enter name of policy created above
Name / description or FOle

Attaching Role to any EC2 instance will allow the actions laid out in the policy

Can add a managed policy, as well as custom policy to Role


Inline Policy
    - works like other policy but is not formally defined as a policy
    - scope is limited to this specific role

TIPS:

- Any perms not EXPLICITY ALLOWED are IMPLICITY DENIED
    - starts off denying EVERYTHING

- EXPLICITY DENY > everything else 
    - explicit deny overrides any explicity allow of the same action / resource

- Only attached policies have an effect

With muliple policies attached to identity or resource
    - AWS JOINS (UNION) all applicable policies together


Permission Boundaries:
 - Used to delegate admin to others
    - admin creating users vs. devs needing perms for Lambda functions 

 - for IAM entities: users and roles 

 - prevent privilege escalation
    or unnecessarily broad perms

using a MANAGED POLICY to SET MAXIMUM PERMISSIONS that an IDENTITY based POLICY  can grant to an IAM ENTITY

Entity Permission Boundary allows it to perform ONLY ACTION ALLOWED 
     by BOTH Identity based policy and Permission Boundaries

NOTE: Permission Boundary controls the maximum permissions an IAM policy can grant

Use cases:
    - Devs creating roles for Lambda functions 
    - App owners creating roles for ECS instances
    - Admins creating ad hoc users

IAM > Users > user_name > Set Permission Boundary

select managed policy i.e. AmazonDynamoDBFullAccess 

hence, if user as full Admin perms, the Permission Boundary limits that to AmazonDynamoDBFullAccess 


AWS Resource Access Manager

 - allows resource sharing between accounts
     - multiple individual accounts
     - AWS Organization

Resources that can be shared using RAM:
    App Mesh
    Aurora
    CodeBuild
    EC2
    EC2 Image Builder
    License Manager
    Resource Groups
    Rout 53
ex.
Launch EC2 instance in a shared subnet 
    - Acct 1 has a private subnet 
    - Acct 2 can launch instances into the Shared subnet

ex. RDS 

Acct1 
    - Auroa Database cluster

Goal is to share into Acct 2

Resource Access Manager > Create a resource share
Name: Aurora Cluster Share 
Resources:   Aurora DB clusters
 - select cluster


Principals:
[x] Allow external accounts
Enter Account number for Acct 2

[create resource share]


Acct 2: 
RDS > Databases > refresh
Nothing is shown


Details of share show shared principal in "Associating" state. 

NOTE: Acct 1 sends and invite to Acct 2 to share resource

Acct 2 > Resource Acces Share > Shared with me > Resource Shares 
- pendng invitation
 - click 
 - accept resource share

RDS > refresh 
Role "Shared from account ...."


AWS Single Sign On

 - SSO service helps centally manage access to AWS accounts / business apps.
    - can be third party 
        i.e. Box, GitHub Slack, SeriveNow, Office365, etc.

 - can sign into AWS accounts i (and 3rd party accts)
   using SSO portal with corporate identities

Granular Account-Level Perms

SSO integrates with Active Directory or 
  any SAML 2.0 Identity Provider
    i.e. Azure AD
 
  - can log into SSO portal with Active Directory creds
  - SSO can grant access to AWS Organizations 
        - OU=Dev, OU=Prod
  - SSO can grant access SAML 2.0 enabled applications

SAML: Security Assertion Markup Language
 - standard to log users into applications 
     based on sessions in another context 
        i.e. Microsoft Active Directory
           or businss app i.e. GSuite

NOTE:  All signon activities recorded in CloudTrail

If you see SAML in question, look for SSO in answers


Advanced IAM Summary 

Directory Service 
 - connects AWS resources with on-prem AD
 - SSO to any domain-joined EC2 instance

AWS Managed Microsoft AD
    - Real AD running on MS Servers


AD Trust:
 - extend AWS Managed Microsoft AD to on-prem

KNOW Responsibilites
                AWS                                     Customer
    - Multi-AZ deployment                     - Users, groups, Group Policy Object
    - Patch, monitor, recover                 - Standard AD tools
    - Instance rotation                       - Scale out DCs 
    - Snapshot and restore                    - Trusts (resource forest)
                                              - Certificate authorities (LDAPs)
                                              - Federation
Simple AD
 - AD Lite 
 - Basic AD features: 
 - Small  <= 500
 - Large  <= 5000
    - Does not support Trusts

AD Connector 
 - Directory gateway (proxy) for on-premises AD
 - Allow on-prem users to log into AWS using AD      
 - Join EC2 Instances to your existing AD 

Cloud Directory
  - LDAP

Cognito User Pools 
    - works with social media logins

 Active Directory Compatible               NOT  Active Directory Compatible
    - Manged Microsoft AD                   - Cloud Directory 
    - AD Connector                          - Cognitor User Pools
    - Simple AD

IAM
ARN: 
    arn:partition:service:region:account_id:
    resource_type/resource/qualifier
    resource_type/resource:qualifier
Policy: Effect / Action / Reasource (EAR)

Deny > Allow 
Permissions Boundaries
     - max resources an entity can have

Resources that can be shared using RAM:
    App Mesh
    Aurora
    CodeBuild
    EC2
    EC2 Image Builder
    License Manager
    Resource Groups
    Route 53

SSO:
 - use existing corporate identities
 - Account Level perms 
 - SAML: Security Assertion Markup Language 


## Route 53

DNS is on port 53


IPv4:  32 bits ==>> 4.2 Billion
IPv6: 128 bits ==>>  340 undecillion addr

Top Level Domain:  .com , .edu, .gov

Internet Assigned Numbers Authority (IANA)
 - root zone database
 - db of all top level domains

domain names in whois 

Every Domain Record has 

SOA:  Start of Authority Record
 - name of the server that supplied data for the zone
 - the administrator of the zone
 - current version of the data file
 - default number of seconds for TTL on resource records

NS: Name Server Records
 - used by Top Level Domain servers to direct traffice to the 
    Content DNS server which contains the authoritative DNS records.


xyz.com >> TLD  xyz.com  172800 IN NS ns.awsdns.com    >>  NS Records (and Name Server) >> SOA record >> DNS Records


DNS Records contain several types of records: 

"A" record: fundamental type of DNS Record 
    "A" stands for Address
    translates name to IP addr 

TTL: length that a DNS record is cached,  Time To Live
        Default TTL = 48 hours, lower number faster update


CName:  Canonical Name 
    - resolve one domain to another
    ex. m.xyz.com ==>> moble.xyz.com


Alias Records:   
 - map resource record sets in hosted zone to ELB, CloudFrond or S3 buckets 
    that are configured as websites
Like an CName

map xyz.com ==>> elb1234.ebl.amazonaws.com

DIFFERENCE between CName and Alias
    - CName can't be used for naked domain names (zone apex record)

i.e. xxyz.com can't be a CName 

Tips:
 - ELBs DO NO have pre-defined IPv4 addresses, always resolve via a DNS name.

 - difference between Alias and CName
    point a zone apex record or named nomain name to an ec2 instance, Alias record is used 
    i.e. xyz.com ==>> EC2 Instance (done via Alias Record)


Common DNS Record Types:
 SOA:   Start of Authority
 NS:    Name Server 
 A:     Alias 
 CName: Canonical,  resolve one domain to another
 MX:    Mail
 PTR:   Reverse of an A Record, look up name against IP address


# Route53 Routing Policies Available on AWS 

Routing Policies:
 - Simple Routing
 - Weighted Routing
 - Latency-based Routing
 - Failover Routing
 - Geolocation Routing
 - Geoproximity Routing (Traffic Flow Only)
 - Multivalue Answer Routing


Simple Routing Policy:
    - one record with multiple IP Addr

Weighted Routing Policy:
  - split traffice dependent on weight
    10% traffic 1.1.1.1
    75% traffic 2.2.2.2
    15% traffic 3.3.3.3

Associate with Health Check (y/n) 
 - when responding to queries, Route 53 can omit resources that fail health checks.
    - removed until health check passes
 - can be notified if healthcheck failed


Latency Based Routing Policy:
 - route traffic based on lowest network latency for end user
 - create latency resource record for EC2 or ELB

Failover Routing Policy:
 - active / passive setup
    - failover to Secondary if Primary goes down
 - 53 monitors via health check

NOTE: you have to create a Health Check record in Route 53

Geolocation Routing Policy:
 - traffic sent based on geographical locations of users
 - location can be continents or countryes

Geoproximity Routing Policy (Traffic Flow Only): 
 - route traffice based on geo location of users and resources
 - can optionally choose to route traffic via a bias 
    - bias expands or shrinks the size of the geographic region 
       from which the trafic is routed to a resource

NOTE: MUST BE USED with ROUTE 53 Traffic Flow

Route 53 > Traffic Flow > Traffic Policies


Multivalue Answer Routing Policy:
    - return multiple values i.e. IP Addr
    - specify multiple values for almost any record
        - multivalue answer routing lets you check health of each resource
    - returns only valus for healthy reousrces

Similar to simple routing but puts a health check on each record set.

DNS Summary:

- ELBs do NOT have pre-defined IPv4 addresses, resolves to DNS Name
- Alias can be used a root CName cannot


Quota for domain names in Route 53:    **
 - The limit is 20 for new customers as of March 2021. 
   If you have an existing account and your default limit is 50 now, it will remain at 50. Reference: Amazon Route 53 Quotas. 


## VPC

Virtual Private Cloud (VPC)
 - logically isolated Cloud to launch resources in virtual netowork you define.
    - complete control over virtual network environment
    - IP address range 
    - subnets 
    - config route tables
    - network gateways


Hardware VPN between datacenter and VPC
    - AWS as extension of corporate datacenter

VPC: Public and Private subnets                                                                                                                                     
                                                                                                                                                                         
   ┌──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐       
   │                                                                                                                                  │       
   │    ┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐   │       
   │    │                                                                                                                         │   │       
   │    │      ┌─────────────────────────────────────────────────┐                                                                │   │       
   │    │      │ Public Subnet (10.0.1.0/24)                     │                                                                │   │       
   │    │      │   ┌──────┐       ┌────────────────────────┐     │             ┌──────────┐    ┌──────────┐                       │   │       
   │    │      │   │      │       │                        │     │             │          │    │          │                       │   │       
   │    │      │   │ EC2  │       │     Security Group     │     │             │ Network  │    │  Route   │                       │   │        
   │    │      │   │      │       │                        │     │◄────────────│          │◄───│          │◄──┐                   │   │                                                                          │   │       
   │    │      │   └──────┘       └────────────────────────┘     │             │   ACL    │    │  Table   │   │                   │   │       
   │    │      │   Instance                                      │             │          │    │          │   │  ┌─────┐          │   │       
   │    │      └─────────────────────────────────────────────────┘             │          │    │          │   │  │  R  │        ┌───────┐ 
   │    │                                                                      └──────────┘    └──────────┘   │  │  O  │        │       │ 
   │    │                                                                                                     │  │  U  │        │ Inet  │
   │    │                                                                                                     │──│  T  │<────── │Gateway│ 
   │    │      ┌─────────────────────────────────────────────────┐                                            │  │  E  │        │       │ 
   │    │      │  Private Subnet (10.0.2.0/24)                   │                                            │  │  R  │        └───────┘ 
   │    │      │   ┌──────┐       ┌────────────────────────┐     │             ┌──────────┐    ┌──────────┐   │  └─────┘          │   │       
   │    │      │   │      │       │                        │     │             │          │    │          │   │     ▲             │   │       
   │    │      │   │ EC2  │       │     Security Group     │     │             │ Network  │    │  Route   │   │     │             │   │       
   │    │      │   │      │       │                        │     │◄────────────│          │◄───│          │◄──┘     │             │   │                                                                                          │             │   │       
   │    │      │   └──────┘       └────────────────────────┘     │             │   ACL    │    │  Table   │         │             │   │       
   │    │      │   Instance                                      │             │          │    │          │         │           ┌───────┐ 
   │    │      └─────────────────────────────────────────────────┘             │          │    │          │         │           │Virtual│
   │    │                                                                      └──────────┘    └──────────┘         └────────── │Private│ 
   │    │                                                                                                                       │Gateway│ 
   │    │                                                                                                                       └───────┘ 
   │    │   VPC  10.0.0.0/16                                                                                                      │   │       
   │    └─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘   │       
   │    Region (us-east-1)                                                                                                            │       
   └──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘       
                                                                                                                                                                         
                                           
                                           
Private IP Addr Ranges
------------------------------------------
10.0.0.0    - 10.255.255.255        10/8                                                                                                       
172.16.0.0  - 172.31.255.255        172.16/12
192.168.0.0 - 192.168.255.255       192.168/16


NOTE: Largest  subnet you can have inside a VPC  /16
      Smallest subnet you can have inside a VPC  /28

CIDR.xyz    << site to calculate CIDR


VPC Features:
  - Launch instances into subnet
  - Assign custom IP Address ranges in each subnet
  - Configure route tables between subnets
  - Create internet gateway and attach VPC
  - Better security control over AWS resources
  - Instance security groups
  - Subnet network access control lists

Default VPC vs Custom VPC
 - deafault allows for immediate deploy
 - all subnets in default have a route to the internet
 - Each EC2 instance has both public and private IP address

VPC Peering
 - Allows you to connect one VPC with another via direct network route 
    using private IP addresses

 - Instances behave as if they were on the same network
 
 - Can peer VPC's with other AWS accounts as well as with other VPCs in same account
 - Can peer across Regions 
 
 - NOTE: Peering is in a star configuration: 1 central VPC peers with 4 others.
         NO TRANSITIVE PEERING

Tips:
1 Subnet = 1 AZ
    - CANNOT HAVE 1 SUBNET across AZs
    - Can Have 1 AZ have multiple subnets

Security Groups are Stateful
NACLs  are Stateless
NACLs are at the subnet / VPC level
Security Groups are at the resource level

# Create Own VPC Part 1


VPC > VPC instance > Subnets
acutal subnets in VPC 

172.31.0.0/20   =>> us-east-1c    4091 available IP Addresses
172.31.16.0/20  =>> us-east-1d
172.31.32.0/20  =>> us-east-1e
172.31.48.0/20  =>> us-east-1b
172.31.64.0/20  =>> us-east-1a
172.31.80.0/20  =>> us-east-1f

VPC > VPC instance > Route table
2 routes: 
-   detination: 0.0.0.0/0       target: internet gateway (igw)
-   detination: 172.31.0.0/16   local:   

VPC > VPC instance > Internet Gateway
  attached to VPC

VPC > VPC instance > Network ACLs
    - associated with all subnets
Inbound
Rule Number        Type             Protocol        Port Range      Source         Allow/Deny
100                 All traffic     All             All             0.0.0.0/0       Allow
0                   All traffic     All             All             0.0.0.0/0       Deny

Outbound
Rule Number        Type             Protocol        Port Range      Source         Allow/Deny
100                 All traffic     All             All             0.0.0.0/0       Allow
0                   All traffic     All             All             0.0.0.0/0       Deny



VPC > VPC instance > Security groups

Create VPC (what resource created by default)

NOTE: CIDR block size must be between /16 and /28.


Tenancy: Default | Dedicated
NOTE: Dedicated means dedicated hardware / MUCH MORE EXPENSIVE

CLI command:

aws ec2 create-vpc \
 --instance-tenancy "default" \
 --cidr-block "10.0.0.0/16" \
 --ipv6-cidr-block-network-border-group "us-east-1" \
 --tag-specifications '{"resourceType":"vpc","tags":[{"key":"Name","value":"knotknull.dev.vpc"},{"key":"env","value":"dev"}]}' 


What was created:
Subnets     : NO
Route Table : YES  (only local routes, four subnets)
Inet gateway: NO
NACLS       : Yes  (Same default Inbound / Outbound Rules but for IPv4 and IPv6.  NOTE: No subnets associated)
Security Grp: Yes  (Default Security Group Created)
                    NOTE:  for Default Security Grop                
                        Inbound :  1 Rule,  all traffic / all IP types
                        Outbound:  2 Rules, all traffic / one each for IPv4 and IPv6

Default resources created for a new VPC: 
  - Route Table
  - NACL 
  - Security Grp 
  - Router


NOTE: availability zones are randomized per account 
  i.e.  acct #1 us-east-1a  is not the same as acct #2 us-east-1a

NETWORK NOTES: 
Only 251 out of 256 addresses available

Amazon Reserves 5 IP Addresses:
  10.0.0.0   - Network   Address 
  10.0.0.1   - VPC Router
  10.0.0.2   - DNS Server
                    - base of VPC network range + 2
                    - base of each subnet range + 2
  10.0.0.3   - Reserved for future use
  10.0.0.255 - Broadcast Address


Make on e subnet have Auto-assing public IP addresses

VPC > Subnet > Select > Action > Edit Subnet Settings
 - enable auto-assign publc IPv4 addresses

Add Internet Gateway to new VPC: 
Create Internet Gateway

Once created, attach to VPC
VPC> Internet Gatways > Actions > Attach 

aws ec2 attach-internet-gateway --vpc-id "vpc-07faa2b86804d88c8" --internet-gateway-id "igw-0076d4f89018b05bf" --region us-east-1

NOTE: can only have one Internet Gateway per VPC


Create Route to Internet via Route Table
VPC > Route Tables > instance 

NOTE:  keep main route table private and create route table for public access

VPC > Route Tables > Create Route Table

once created, add route to internet gateway

VPC > Route Tables > Instance > Edit Routes > Add Route
destination: 0.0.0.0/0 
target     : igw ... (new internet gateway assocaited with VPC)

associate subnet to new public route table
VPC > Route Tables > Instance > Edit Routes > Subnet Associaions > Edit Subnet Associations
Associate Public Route table with subnet that had set Auto Assign Public IP Addr 

create 2 ec2, one public, one private




NOTE: Security Groups DO NOT SPAN VPCs
Review: 

Default resources created for a new VPC: 
  - Route Table
  - NACL 
  - Security Grp 
  - Router

NO SUBNETS or Internet Gateway

Amazon Reserves 5 IP Addresses:
  10.0.0.0   - Network   Address 
  10.0.0.1   - VPC Router
  10.0.0.2   - DNS Server
                    - base of VPC network range + 2
                    - base of each subnet range + 2
  10.0.0.3   - Reserved for future use
  10.0.0.255 - Broadcast Address

Only 1 Intgernet Gateway per VPC

Security Groups CAN NOT SPAN VPCs



SSH Notes:

1. Use ssh-agent forwarding from bastion host to ec2 instances

2. On client add key to keychain 
    ssh-add -K ssh_key.pem 

3. Can verify keys available to ssh-agent use:
    ssh-add -L 

4. Connect to bastion host using -A option.   Enables SSH agent forwarding. 
   Local SSH agent responds to public-key challenge when ssh from bastion to EC2 instance.
    ssh -A user@bastion_host    # Agent Forwarding

6. Once in bastion host, connect to ec2 instance 
    ssh  user@ec2_instance


NOTE:  ssh-agent will try all keys until successful, however only 5 attempts allowed. 
       Make sure there are not more than 5 keys in ssh-agent by chcking:
         ssh-add -L 


https://aws.amazon.com/blogs/security/securely-connect-to-linux-instances-running-in-a-private-amazon-vpc/



# NAT Instance vs NAT Gateway

Network Adress Translation

NAT Instance:  EC2 instance
NAT Gateway:   HA Gateway service
               - private subnets can communicate w/ Internet without being public


Can create a NAT instance via Amazon Linux image via: 
 https://docs.aws.amazon.com/vpc/latest/userguide/work-with-nat-instances.html#create-nat-ami

Or 

You can use a NAT Gateway


TIP:

- When creating a NAT instnce:  Disable Source / Destination Check on the instance
- NAT instance put be in public subnet
- Must be a route OUT of private subnet to the NAT instance
- NAT instances ALWAYS behind a security group

NAT gateways
- redundant inside AZ 
- Only ONE NAT Gateway in an AZ  (can't span)
- start at 5 Gbps and scale to 45 Gbps
- No patching
- Not associated with security groups
- Automatically assigned a public IP address
- Update route tables
- Create NAT Gateway per AZ per HA

# Network Access Control Lists (NACLs) vs Security Groups

New NACL deny all traffic inbound / outbound by default


Ephemeral ports for NAT Gateway, port assigned for the client end of a client-server communication.  (i.e. the port that the client gets)
NAT Gateway Ephemeral Ports:  1024 - 65535

Rules are being evaluated by rule number lowest to greateest and then the DENY rules
    - If you have a DENY first (lower number) followed by an ALLOW later for same rule the DENY takes precedence

MAIN THING:  NACLS can deal with ports and IP Addrs and Security Groups cannot


Subnet can only have associated with 1 NACL
NACL can have man subnets


NOTE:  NACLs evaluated BEFORE security groups 
     A DENY in NACL won't ever make it to a security group

VPC automatically comes with default NACL
    - default allows all inbound and outbound

Custom NACL stargs with all inbound / outbound traffice as DENY

Each subnets associated with 1 NACL
 - if NOT defined it is associated with default NACL

NACLS are stateLESS
Security groups are stateFULL


# Custom VPC and ELBs

EC2 > Load balancers 

3 Types: 
 - Application Load Balancer  (request level)      HTTP / HTTPS, microservices, containers
 - Network Load Balancer      (connection level)   low latencies, millions request per sec, TLS offload, UDP, static IP
 - Gateway Load Balancer      support 3rd party virtual appliences supporting GENEVE (bump in the wire)
 

NOTE: At least 2 public subnets needed for a load balancer **

# VPC Flow Logs

- capture IP traffic going to / from network interfaces in VPC.
- stored usin CloudWatch Logsg
    - can view and retrieve in CloudWatch Logs 

3 levels:
 - VPC
 - Subnet
 - Network Interface level

Tip: 
- Cannot enable flow logs for VPCs that are peered with your VPC 
  unless the peer VPC is in you account
- can tag flow logs 
- after creating flow log, CAN'T change configuration
- Not all IP traffice is monitored
    - Amazon DNS
    - WIndows instance for Amazon Windows license activiation
    - traffic to 169.254.169.254
    - DHCP traffic
    - traffice to reserved IP addr for default VPC router

# Bastion Host

 - jump box 
 - allows access to internal network resources wil limiting / hardened against public access
 - ssh / rdp
 - Can't use an RDP Gateway as a bastion host


# Direct Connect
 - Cloud service that establishes dedicated network connection from onprem to AWS.
 - Private connectivity from AWS to data center.
 - increase bandwidth thruput
 - dedicated lines / No traffic over Internet
                                                   Direct Connect Location
+----------------+ <-- AWS Backbone Network-- >   +-------------------------+  <---- Customer / --->  +----------------+
|                |                                | [AWS Cage]  [Customer]  |       Provider Link     |                |
|                |                                | [   DX   ]  [/Partner]  |                         |                |
|  [AWS Public]  |                                | [ Router ]  [Router  ]<-|---------+               |                |
|       |        |            DX                  |    |            |       |         | Last Mile     |                |
|       + -------|<------------------------------>|    +--X-Connect-+       |         +---------------|->[Customer ]   |   
|       |        |         Connection             +-------------------------+           pseudo wire / |  [  Router ]   | 
|       |        |                                 Direct Connect Location              LAN extension |                |
|       |        |                                +-------------------------+                         |                |
|       |        |                                | [AWS Cage]  [Customer]  |                         |                |
|       |        |                                | [   DX   ]  [/Partner]  |                         |                |
|  [VPC Private] |                                | [ Router ]  [Router  ]  |                         |                |
|                |                                |    |            |       |                         |                |
|                |                                |    +--X-Connect-+       |                         |                |   
|                |                                +-------------------------+  <---- Customer / --->  |                |
+----------------+ <-- AWS Backbone Network-- >                                     Provder Link      +----------------+
    AWS Region                                                                                            Customer
                                                                                                        WAN / MAN / LAN     

- Direct connection to AWS
- Useful for high thruput (lots of network traffic)
- need a stable and reliable connection
ex. question:  VPN that drops connectiivity can be solved by Direct Connect


# Setting up Direct Connect

- AWS Direct Connect > Virtual Interface         : create Public Virtual Interface 
- VPC > VPN Connection > Customer Gateway        : create Customer Gateway
- VPC > VPN Connection > Virtual Prifate Gateway : create Virtual Private Gateway
- Attach Virtual Private Gatewayto desired VPC
- Site-to-Site VPN Connection : create VPN Connection
    - select Virtual Private Gateway
    - select Customer Gateway
- Setup VPN on customer gateway / firewall


How to setup routing my AWS Direct Connect private virtual interface to access my VPC resources

https://www.youtube.com/watch?v=mj5V3_-QEW0



# AWS Global Accelerator

- service to create accelerator to improve availability / performance of apps 
   for local / global users

- Global Accelerator directors traffic to optimal engpoints to AWS Global Network
    - default: gives two static IP addresses that's associated with Accelerator



 [ User ] --> [ AWS Edge Location ] --> [ AWS Global Accelerator ] --> [ Endpoint Groups ] --> [ Endpoints ]

AWS Global Accelerator: directs traffic to optimal endpoint 
        - proximity, health, endpoint weights

Endpoint group: Endpoint in an AWS Region, includes 1 or more application endpoints

Endpoints     : final delivery of traffic


Global Accelerator components:
 - Static IP Address (2)
    - can BYO IP Addr 

 - Accelerator
    - each Accelerator includes 1 or more listeners
 - DNS Name
    - created to point to static IP addresses assigned by Global Accelerator
    i.e. aaaa11111xxxxx22222zzzzz.awsglobalaccelerator.com 

 - Network Zone
    - services static IP addresses for Accelerator 
    - similar to Availability Zone
    - own physical infrastructure


 - Listener 
    - listener processes connections from cliets to endpoints in groups
    - associate endpoint group to listener vie Region 

 - Endpoint Group
     - associated with AWS Region 
     - one more endpoints in region 
     - traffic dial adjusts amount of traffic sent to endpoint group i.e. blue / grean testing

 - Endpoint
    - Network Load Balncers
    - Application Load Balancers
    - EC2 instances
    - Elastic IP addresses
    - weights used to portion out traffic among endpoints
    - performance testing in a region

# VPC Endpoint
 - Virtual device, horizontally scaled, redundant, HA VPC component
 - allow communication between intances in VPC and services without leaving Amazon network
 - powered by PrivateLink
 - NO: internet gateway, NAT, VPN connect or AWS Direct Connect
 - VPC instances do not require public IP address

2 types:
 - Interface Endpoints
 - Gateway Endpoints

Interface Endpoint:
 - Elastic Netwrok Interface (ENI) with private IP address
 - serves as an entry point for traffic destined to supported service
 - Supported services: 
    API Gateway                 Kinesis Data Streams
    AWS CloudFormation          SageMaker  / SageMaker Runtime
    AWS CloudWatch              SageMaker Notebook Instance
    AWS CloudWatch Events       Secrets manager
    AWS CloudWatch Logs         Security Token Service
    AWS CodeBuild               Service Catalog
    AWS Config                  SNS
    AWS EC2 API                 SQS
    ELB API                     Systems Manager
    KMS 
    Endpoint services hosted by other AWS Accounts
    Supported AWS Marketplace partner services 

 - Essentially a prive IP address attached to an ENI that can access AWS services internally


Gateway Endpoint:

 - Like NAT Gateway
 - Supported fo 
    - Amazon S3 
    - DynamoDB

ex. 
  EC2 Instance in Private Subnet utilizing S3 Gateway Endpoint to read/write S3 bucket 
   without leaving internal netowrk


NOTE: ec2-s3 role allows EC2 full access to S3 

- Add role to private ec2 instance

VPC > Endpoints > Create Endpoint
Type:
     AWS Services  

Services:
   com.amazonaws.us-east-1.s3   gateway 

Network settings: 
 knoknull.dev.vpc

Route Tables 
  default / main

Policy
    full access or custom


NOTE:  VPC Endpoint gets added to the Route of the VPC

NOTE:   aws s3 ls << hangs, may have to specify region you are in 
        aws s3 ls --region us-east-2

# VPC PrivateLink 

Open services to other VPCs
    - vpc to internet
    - vpc peering
    - Private Link << BEST

Private Link:
 - no VPC peering, no route tables, NAT, igw

Requirements:
 - Network Load Balancer on Service VPC
 - ENI on the Customer VPC

                  +--------  AWS Private Link -----------+
    Service VPC   |                                      | Customer VPC 
    +--------------------------+            +--------------------------+
    |             |            |            |            |             |
    |             |            |            |            |             |
    | [App    ]   |   [Network]|            |[Elastic]   |   [    App] |
    | [Service]---|---[   Load]|------------|[Network]---|---[Service] |
    |             |  [Balancer]|            |[Interface] |             |
    |             |            |            |            |             |
    +--------------------------+            +--------------------------+
                  |                                      |
                  +--------------------------------------+
                  

Question on peering VPC to 10, 100s, etc customer VPC  USE Private Link


# Transit Gateway
 - think big cloud router
 - across AWS Regions
 - supports multcast
 - single point where all connections can connect to
 - hub and spoke model


    Amazon VPC  ------+    +------ Amazon VPC
                      |    |                    
                    [---------]                      
                    [ AWS     ]
      VPN ----------[ Transit ]----------[ AWS Direct Connect Gateway ]
                    [ Gateway ]
                    [---------]                      
                      |    |
    Amazon VPC  ------+    +------ Amazon VPC


- Transitive peering between thousands of VPCs and On-prem datacenters
- Regional and Multi-region
- Across multiple AWS Accounts using Resource Access Manager
- Use route tables to limit how VPCs talk to each other
- works with Direct Connect and VPN
- Supports IP multicast


# AWS VPN CloudHub

- hub and spoke model 
- connect multiple sites using VPNs
- operates over publc internet



# Netowrk Costs


- ingress is free

- instance to db via private ip and samve AZ, traffic is free

- traffic between AZs via private IP: cost

- traffic between AZs via public IP : 2x cost

- traffic between two ec2 instance in same AWS Region stays within AWS network

- traffic between two VPC in different regions:  inter-region cost

- Always use private IP addresses over public IP addresses

- Cut all network costs:  all EC2 in same AZ and use private IP addr
        - single point of failure


Summary:

NAT Instance:  Disable Source / Destination Check on instance

NAT Gateway: Redundant insize AZ  (5 Gbps to 45 Gbps)

VPC comes automatically with NACL 
 - default allows all outbout and inboud

New NACL being created denies all inbound / outbound traffic by default

Each Subnet MUST BE associated with NACL, defaults to VPC default NACL

CAN  Block IP Addr / Ports on NACLs             (NACLs are ALLOW and DENY)
CANT Block IP Addr / Ports on Security Groups   (Security Group is always allow)

NACL can have MULTIPLE Subnets
Subnets can have ONLY ONE NACL

NACL rules evaluated with lowest number first

If ALLOW before equivalent DENY, ALLOW wins because it is evaluated first
If need to DENY ensure it is before any ALLOWs 


Internet facing Load Balancer needs two subnets

Can't have flow logs across Accounts
Can't change flow log configuration
NOT ALL TRAFFIC IS MONITORED in flowlogs:
    - Amazon DNS server not logged
        -own DNS server would be logged

    - Windows license activation
    - DHCP
    - 169.254.169.253
    - 



# Setting up Direct Connect

- AWS Direct Connect > Virtual Interface         : create Public Virtual Interface 
- VPC > VPN Connection > Customer Gateway        : create Customer Gateway
- VPC > VPN Connection > Virtual Prifate Gateway : create Virtual Private Gateway
- Attach Virtual Private Gatewayto desired VPC
- Site-to-Site VPN Connection : create VPN Connection
    - select Virtual Private Gateway
    - select Customer Gateway
- Setup VPN on customer gateway / firewall


# AWS Global Accelerator
- service to create accelerator to improve availability / performance of apps 
   for local / global users

- Global Accelerator directors traffic to optimal engpoints to AWS Global Network
    - default: gives two static IP addresses that's associated with Accelerator

VPC Endpoints: 

2 types:
 - Interface Endpoints
 - Gateway Endpoints

Interface Endpoint:
 - Elastic Netwrok Interface (ENI) with private IP address
 - Essentially a prive IP address attached to an ENI that can access AWS services internally

Gateway Endpoint:
 - Supported fof 
    - Amazon S3 
    - DynamoDB

Private Link:
 - no VPC peering, no route tables, NAT, igw

Requirements:
 - Network Load Balancer on Service VPC
 - ENI on the Customer VPC

# Transit Gateway
 - think big cloud router / across AWS Regions
 - supports multcast
 - single point where all connections can connect to
 - hub and spoke model

- Transitive peering between thousands of VPCs and On-prem datacenters
- Regional and Multi-region
- Across multiple AWS Accounts using Resource Access Manager
- Use route tables to limit how VPCs talk to each other
- works with Direct Connect and VPN
- Supports IP multicast


# AWS VPN CloudHub

- hub and spoke model 
- connect multiple sites using VPNs
- operates over publc internet



# Netowrk Costs
- ingress is free
- instance to db via private ip and samve AZ, traffic is free
- traffic between AZs via private IP: cost
- traffic between AZs via public IP : 2x cost
- traffic between two ec2 instance in same AWS Region stays within AWS network
- traffic between two VPC in different regions:  inter-region cost
- Always use private IP addresses over public IP addresses
- Cut all network costs:  all EC2 in same AZ and use private IP addr
        - single point of failure


Quiz:

How man VPCs are allowed per AWS Account per Region before requesting increase 
    - 5

Are you permitted to conduct your own security assessments or penetration tests on your own VPC without alerting AWS first?
  - Depends on the type of security assessment or penetration test and the service being assessed. 
     Some assessments can be performed without alerting AWS, some require you to alert.
  - AWS customers are welcome to carry out security assessments or penetration tests against their AWS 
     infrastructure without prior approval for 8 services only. You should request authorization for other simulated events. Reference: Penetration Testing.



Security Group: Instance level
NACLs         : Subnet Level

Which of the following are true for security groups?  Choose 3
 - Security groups evaluate all rules before deciding whether to allow traffic.
 - Security groups support "allow" rules only.
 - Security groups operate at the instance level and are associated with network interfaces.

Security groups control access at the instance-level (as they are associated with network interfaces), 
they support "allow" rules only, and they evaluate all rules before deciding whether to allow traffic into the instance(s).

Security groups operate at the instance level (as they are associated with network interfaces), 
they support "allow" rules only, and they evaluate all rules before deciding whether to allow traffic.

You have created a new VPC and launched an EC2 instance into a public subnet. However, you did not assign a public IP to the instance during its creation. What is the easiest way to make your instance reachable from the internet?
 - Create an Elastic IP address and associate it with your EC2 instance.

When peering VPCs, you may peer your VPC only with another VPC in your same AWS account.
 - You may peer a VPC to another VPC that's in your same account, or to any VPC in any other account.




What is the purpose of an egress-only internet gateway?
 - Allows VPC based IPv6 traffic to communicate to the internet
 - Prevents IPv6 based internet resources to initiate a connection into a VPC

The purpose of an egress-only internet gateway is to allow IPv6 based traffic within a VPC to access the internet, whilst denying any internet based resources to connection back into the VPC.



A VPN connection consists of which of the following components?
 - Customer Gateway
 - Virtual Private Gateway

A customer gateway is a resource that is installed on the customer side and provides a customer gateway inside a VPC.
A Virtual Private Gateway sits at the edge of your VPC and is a key component when using a VPN. It's responsible for site-to-site connection from on-premises to a VPC.

By default, EC2 instances in new subnets in a custom VPC can communicate with each other across Availability Zones.
- In a custom VPC with new subnets in each AZ, there is a route within the route table that supports communication 
    across all subnets/AZs. Additionally, it has a Default SG with an "allow" rule: all traffic, 
    all protocols, all ports, from resource using this default security group. 


VPC Flow logs created at these levels:
    - VPC
    - Subnet 
    - Network Interface 

## HA Architecture

# Elastic Load Balancers 
 3 type
 - Application Load Balancer
 - Network Load Balancer
 - Gateway Load Load Balancer

Application Load Balancer
 - HTTP / HTTPS 
 - Layer 7 
 - advanced request routing 
    - sending specified requests to specific web servers


 Network Load Balancer
 - load balancing TCP traffic
 - Layer 4 / connection level
 - ultra low latencies
 - millions req / sec


Gateway Load Balancer
deploy and manage a fleet of third-party virtual appliances that support GENEVE. 
These appliances enable you to improve security, compliance, and policy controls

X-Forwarded-For header has the original IP address of the end user
504 Error : Gateway has timed out, application stopped responding


Attach endpoints to a load balancer: 
 associate targets to a target group and then associate target group to load balancer


# Load Balancers and health checks


502 / 504 Bad Gateway when using App ELB and no app is running

Load Balancers always have DNS names, never given IP Address


Read ELB FAQ


# Advanced Load Balancer Theory

Sticky Session 
 - bind user session to specific EC2 instance
   all requests from that users as sent to the same instance during that session
 - can enable for App Load Balancers but traffic will be sent at Target Group Level
 
 - disable sticky sessions if ec2 instance isn't receiving any traffic

Cross Zone Load Balancing


No Cross Zone Load Balancing   
                             us-east-1a
                            +---------------------------+ 
                       +----|  [x] [x] [x] [x]     50%  |
                       |    +---------------------------+
     Route 54  ------- +
                       |    +---------------------------+ 
                       +----|  [x]                 50%  |
                            +---------------------------+
                             us-east-1b

Traffic is being split across AZs although number of available instances is not even


No Cross Zone Load Balancing   
                             us-east-1a
                            +---------------------------+ 
                       +----|  [x] [x] [x] [x]     80%  |
                       |    +---------------------------+
     Route 54  ------- +
                       |    +---------------------------+ 
                       +----|  [x]                 20%  |
                            +---------------------------+
                             us-east-1b

Load is balanced out across AZs


Exam scenario, all instances in one AZ are getting traffic, other instance in other AZ are 
  not receiving traffice:   Enable Cross Zone Load Balancing


Path Patterns:
 - create a listener with rules to forward requests based on the URL path.
 Path based routing.  i.e. microservices
  i.e. route general requests to one target group
       route render image requests to another target group



MAP: Replaced by  CloudFront, API Gateway, HTTP Service reverse proxy (NGINX)

# Auto Scaling
3 components 
 - groups
     logical components i.e. web server group, db group, app group

 - Configuration Templates 
    Groups uses a launch template or launch configuration for EC2 instances
      specify: AMI ID, instance type, key pair, sec grps, block device

 - Scaling Option
    several ways to Scale Auto Scaling Groups.
    ex.  configure by conditions (dynamic scaling) or on a schedule

        - maintain current instance levels at all times
        - scale manually
        - scale based on a schedule
        - scale based on demand
             - scaling policies define parameters to control scaling 
                i.e. don't go above CPU utilization of 70% else scale up
        - use predictive scaling


# Launch Configuration & Auto Scaling Groups

https://docs.aws.amazon.com/autoscaling/ec2/userguide/control-access-using-iam.html


Auto Scaling group 
 - need a Launch Template first

when you delete autoscaling group, instances beneath are deleted as well

https://docs.aws.amazon.com/autoscaling/ec2/userguide/control-access-using-iam.html


NOTE:  As of 10/1/2024 Auto Scaling Groups will only support Launch Templates



HA Architecture
- plan for failure
- Netflix Simian Army project

goo.gl/UR2nzM

Example:
    Route 53 Health Check
     - w/ Auto Scaling Group 
     - across regions
     - database replication / multi-az deployment

Use multiple AZs and Multiple Regions where ever you can
Know difference between Multi-AZ (DR) and Read Replicas (performance)
scaling up vs. scaling out
consider cost element
KNOW S3 storage classes:
    S3-Standard    : highly available 
    S3-Standard IA : highly available
    S3-One ZOne    : NOT highly available


Fault tolerant Wordpress: Lab pt1


Fault tolerant Wordpress: Lab pt5 Cloudformation

Pre-created cloudformatin scripts to create solutions:

https://aws.amazon.com/solutions/


# CloudFormation 
 - script cloud environment creatin 
 - Quick Start / AWS Solutions Library: pre-built CF templates

# Elastic Beanstalk 

- Elastic Beanstalk is under compute
- deploy and manage apps to AWS Cloud without woryying about infra, etc.
    - handles load balancing, scaling, health monitoring, etc
- layer above CloudFormation

HA with Bastion Hosts


# How to HA a Bastion Host 

1.  Expensive option: 2 instances and a Network Load Balancer 

  +--------------------+       +-----------------+
  | Private Subnet     |  +----| Public Subnet A |
  |                    |  |    |   (Bastison)    |<--+
  |   +------------+   |  |    |                 |   |   +------------+
  |   |     EC2    |   |  |    +---------------- +   |   | Network LB |
  |   |   Instance |   |<-+                          +---| Static     |   <----- SSH / RDP Traffic
  |   |            |   |  |    +-----------------+   |   | IP Addr    |
  |   |            |   |  |    | Public Subnet B |   |   +------------+
  |   +------------+   |  |    |   (Bastion)     |<--+       
  |                    |  +----|                 |
  +--------------------+       +-----------------+


2.  Cheaper option: 1 instances and Auto Scaling Group
     NOTE:  if bastion fails in Subnet A, ASG will start another in Subnet B 
            User Data script can take over EIP addr for newly spun up Bastion Host

  +--------------------+       +-----------------+
  | Private Subnet     |  +----| Public Subnet A |
  |                    |  |    |   (Bastison)    |<--+
  |   +------------+   |  |    |     EIP         |   |   +------------+
  |   |     EC2    |   |  |    +---------------- +   |   |   Auto     |
  |   |   Instance |   |<-+                          +---|   Scaling  |   <----- SSH / RDP Traffic
  |   |            |   |  |    +-----------------+   |   |   Group    |
  |   |            |   |  |    | Public Subnet B |   |   +------------+
  |   +------------+   |  |    |                 |<--+       
  |                    |  +----|                 |
  +--------------------+       +-----------------+

# On-Prem Strategies with AWS

- AWS Services to use on prem:

Database Migration Service
 - move db to / from AWS 
   - Oracle, MySQL, DyanmoDB, etc
   - homogenous and heterogeneous migrations

Server   Migration Service
 - incremental replication of on-prem servers to AWS
 - backup tool, multi-site, DR

AWS Applicaton Discovery Service
 - helps customers plan migratio nprojects by gathering info of on-prem data centers
 - install as virutal appliance on VMware vCenter
 - build a utilization / dependency map of on-prem env
 - saved as encrypted data store / used to estimate TCO of running on AWS
 - data available in Migration Hub

VM Import / Export 
 - migrage existing apps to EC2
 - DR or second site
 - export AWS VMs to on-prem data center


Download Amazon Linux 2 as an ISO
 - works with all major virtualization providers: 
   - VMware, Hyper-V, KVM, VirtualBox, etc


# HA Architecture Summary
https://d1.awsstatic.com/whitepapers/architecture/AWS_Well-Architected_Framework.pdf
https://docs.aws.amazon.com/wellarchitected/latest/framework/welcome.html
 
 - Operational Excellence Pillar
 - Security Pillar
 - Reliability Pillar
 - Performance Efficiency Pillar
 - Cost Optimazaton Pillar
 - Sustainability Pillar


Operaton Excellence Pilar
https://d1.awsstatic.com/whitepapers/architecture/AWS-Operational-Excellence-Pillar.pdf

https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/welcome.html




- 50x Gateway Issue
- check X-Forwarded-For header for IPv4 addresses of end user
- Sticky Sessions, users to same EC2 instance 
- Cross Zone Load Balancing across multiple AZs
- Path patterns:  direct traffice to different EC2 instances based on URL

Read Load Balancer FAQ

HA Bastion Hosts 
- remember netowrk load balancer to handle layer 4 traffic vs. layer 7



# HA Quiz


S3 Standard, S3 Intelligent-Tiering, S3 Standard-IA, S3 One Zone-IA, S3 Glacier, and S3 Glacier Deep Archive Amazon 
designed for 99.999999999% DURABILITY

 Reliability is the probability that a system will work as designed. 

 Durability refers to the on-going existence of the object or resource.

A spread placement group supports a maximum of seven running instances per Availability Zone

Can't use 2nd db of a multi-az deployment as a read node 

Resiliency is the ability of a workload to recover from infrastructure or service disruptions, dynamically acquire 
computing resources to meet demand, and mitigate disruptions, such as misconfigurations or transient network issues.

EC2 Autoscaling works in conjunction with the CloudWatch service to provide a predictive ability to your autoscaling groups.

The Application Load Balancer  has functionality to distinguish traffic for different targets (mysite.co/accounts vs. mysite.co/sales vs. mysite.co/support)

S3 Standard-IA has an availability of 99.9% while S3-1Zone-IA only has 99.5% 

## Applications 

# SQS
Simple Queue Service

 - web services gives access to a message queue 
 - distributed queue system
    - standard queues: at-least-once messaging
            - nearly unlimited transactions / sec
            - can have more than one copy can be delivered
            - messages can arrive out of order

    - FIFO queues    : exactly-once messagint
            - no duplicates
            - message groups:  multiple ordered groups within a single queue
            - limited to 300 transactions / sec

 - redundant infra
 - locks messages during processing: can have multple producers and consumers simultaneously
 - decouple messages from processing 

Message size is 256KB of text  **
 - messages can be larger but would be stored in S3


 - Pull based
 - Messages can be kept in queue from 1 min to 14 days  **
    - default is 4 Days


Visibility timeout:
 - amount of time that a message is invisible in the SQS queue after 
    a reader picks up the message. 

 - if job processes message before visibility timout, message is deleted from queue
    - if not, message because visible again and another reader will process it.
        hence, opportunity for duplicate messages

 - timeout can be extended, maximum is 12 hours


Polling:
 - Long  Polling: does not return a response until a message arrives in the message queu 
 - Short Polling: returns immediately, even if message queue is empty (defaul?) 


# Simple Workflow Service (SWF)
 - web service to coordinate work across distributed app components
 - coordination of tasks
 use cases: 
    - media processing 
    - web app backends
    - analytics pipelines

 tasks: various processing staps 
 - executable code 
 - web service calls
 - human actions 
 - scripts
NOTE: assigned only once and not duplicated 

SWF workflow executions can last up to 1 year
    keeps track of all tasks and events in an application

Workflow Starters: 
  - application that can initate a workflow

Deciders: 
  - Control the flow of activity tasks in a workflow execution, what comes next

 Actors: 
  - Carry out the activity tasks

# Simple Notification Service (SNS)
 - web service that sends notifications from AWS
 - allows app to publish messages and deliver to subscribers
 - Redundant across multiple AZ
 - Pay as you go

 Push notification to: Apple, Google, Fire OS, Windows, Android, Baidu Cloud Push

Integration:
 - can send messages by SMS 
 - email to SQS
 - HTTP endpoint
 - Push based delivery (No Polling)
 - Multiple transport protocols

SNS writes to topics 
 - topic is an acces spoint for recipients to get notification
 - Topic can delivery to multiple endpoints 
 - One write to an SNS topic can be dlivered to multiple susbscribers on various platforms  

SNS == Push
SQS == Poll (Pull)


# Elastic Transcoder

EOL:  On November 13, 2025, AWS will discontinue support for Amazon Elastic Transcoder. 
 - media transcoder in the cloud
 - convert to target end platform: smartphones, tablets, etc
 - provices presets for popular output formats
 - pay by minute and resolution


# API Gateway

Full managed service that publishes, maintain, monitor and secures APIs at scale.

"portal" to EC2, Lambda, Web App

                              +--> [Lambda]
                              |
 [users] ---> [API Gateway] --+--> [EC2]
                              |
                              +--> [DynamoDB]

- Expose HTTPS endpoints define RESTful API
- Serverless connect to Lambda & DyanmoDB
- Send API endpoints to different targets
- Low cost 
- Scales automatically
- Track / control usage by API key
- Throttle requests to prevent attacks
- Connect to CloudWatch to log requests 
- Maintain multiple versions of API

Configure:
    - Define API (container)
    - Define Resources and nested Resources (URL paths)
    Each Resource:
      - Select supported HTTP methods (verbs)
      - Set security
      - Choose target ( EC2, Lambda, DynamoDB, etc)
      - Set request / response tranformations

Deploy:
 - Deploy API to a stage: 
   - Uses API Gateway domain, by default
   - Can use custom domain
   - Supports AWS Certificate Manager: free SSL / TLS certs

API Caching 
 - cache endpoint's response
    - reduce number of calls made to your endpoint
    - improve latency
 - responses are cached to a TTL period (seconds)

Same-origin policy
 - web browser permits scripts in first web page to access data 
    in a second we page but ONLY IF BOTH HAVE SAME ORIGIN (same domain name)
- prevents Cross-Site Scripting (XSS) attacks
     - enforece by web browsers
     - Postman and curl ignore it

CORS: Cross Origin Resource Sharing
 - can relax same-origin policy
 - allows restricted resources (i.e. fonts) on a web page to be requested 
    from another domain outside the domain from the first served
 - Enforced by browser

Browser makes HTTP OPTIONS call for a URL
  NOTE:  The HTTP OPTIONS method is used to describe communication options for the target resource. 
         Browsers send an HTTP OPTIONS request to find out the supported HTTP methods and other options supported 
         for the target resource before sending the actual request

Server responds: These other domains are approved to GET this URL

Error          : Origin policy cannot be read at the remote source
                 Need to enable CORS on API Gateway

# Kinesis

Streaming data platform

3 Types:
 - Kinesis Streams
   - producer stream to Kinesis Streams
     - retained for 24 hours (default), up to 7 days 
   - data is "sharded"
   - consumers read from shards

 - Kinesis Firehose
   - producer stream to Kinesis Firehose
   - no persistent storage, analsysis done "on the fly"
        - Lambda function within Firehose
        - output of Lambda to S3, etc

 - Kinesis Analytics
   - works with  Kinesis Streams and Firehose
   - analyze data "on the fly" for either service
   - stores on S3, Redshift, Elasticsearch Cluster


Shards (partitions):
 - 5 transactions per second for reads **
 - 2 MB per second read rate  **
 - 1000 records per second    write **
 - 1 MB per second write rate (including partition keys)**

Stream capacity is a function of number of shards
 - sum of the capacities of its shards

NOTE: Kinesis Streams is only Kinesis that has shards

# Web Identity & Federation & Cognito

Web Identity Federation
 - access to AWS resources after authenticating with web-based provider 
    Amazon, Facebook, Google
 - after authenication user receives authenication token from id provider
 - can trade for temporary AWS security credentials


Cognito provides Web Id Federaiton features:
    - sign-up and sign-in to apps
    - access for guest users
    - acts as an identity broker between app and Web ID providers
        - don't have to write code auth / auth code
    - synchronizes user data for multiple devices
    - recommended for mobile apps
    - credentials map to IAM Role

Mobile App does not need to store credentials locally

Cognito == Identity Broker: handles interaction between application and Web Id Provider **

User Pools 
 - user directories used to manage sign-up and sign-in 
 - User can sign in directly to User Pool or thru Web Id Provider (Facebook, Google, etc)
 - Successful authentication generates a JSON Web Token (JWT)
 - interface with USERS

Identity Pools 
 - provide temporary AWS credential to access AWS Services: S3, DyanmoDB, etc
 - interface with RESOURCES


 user  -----(1)---->>  User Pool ---> Login to Web Id Provider --->  Facebook / Google / Amazon
| | ^                     |    |                                                           |
| | |                     |    +<--(2)--  auth token from Web Id Provider to User Pool <---+
| | +--(3)---JWT Token----+
| | 
| +--------(4) ----------> Identity Pool 
| |                           |
| +---(5)--- temp AWS Creds --+
|
+--(6)------ temp AWS Creds (IAM ROle) ----->  [AWS Resource: S3]


Cognito uses Push Synchronization to push updates and synchronizes user 
 data across multiple devices 
  - uses SNS to send notification to all devices associated with a specific user

[ user updates data i.e. password ] Cognito sends to SNS --> SNS Silent Push Notifications  --> User devices (phone, tablet, etc.) 



User Pool    : user registratin, authenticcation, account recovery

Identity Pool: grants the IAM role to access AWS resources

# Event Processing Patterns


Pub / Sub:
 - SNS Topic
   - publisher writes to topic
   - subscriber receives message


Dead Letter Queue 
 - SNS:    uses SQS for failed deliveries
 - SQS:    uses DLQ (another SQS queue) for maxReceiveCount messages
 - Lambda: failed async invocations
        - retries twice then sends to SQS or SNS

ex. usage


   [ mobile client ]  --> [ S3: image upload bucket ] --> [ Lambda: transcoding function ] --> [ s3: thumbnail bucket ]
                                                                  |
                                                                  v
                                                        [ SNS: DLQ Topic ] --> [Lambda: Failue Notification Processor]

Fanout Pattern: 

                                          +---->  [ Prod: Fulfillment ]
                                          |
                                          |
  [ Order System ] ----> [SNS: Topic] ----+---->  [ Prod: Data Warehouse ]
                                          |
                                          |
                                          +---->  [ Test Environment  ]

S3 Event Notifications: 
 - receive notification when events happen in / on bucket
    - can be delivered to:  SQS queues, SNS Topic, Lambda Function

 - can filter notifications

 - enable versioning on S3 bucket to ensure notification on every successful write


S3 Event Types: 
  - Object Creates:
      - s3:ObjectCreated:Put
      - s3:ObjectCreated:*

  - Object Removed:
      - deletes of versioned and unversioned objects

  - Object Restored:
      - restoration of objects in Glacier

  - RRS Object Lost:
      - detection of a reduced-redundancy storage object is lost

  - Replication:
      - replication failed
      - replication exceeds 15 min
      - Object no longer tracked by repl metrics


# Application Summary

SQS 
 - decouple infra
 - pull based
 - 256 KB in size
 - retention 1 min to 14 days, default is 4 days
 - standard: order not guaranteed  / can be delivered more than once
 - FIFO    : order is strictly maintained / messages delivered ONLY once


# Lab: Scaling EC2 Using SQS

- simulate load on EC2 Auto Scaling Group by sending messages to SQS

- setup CloudWatch Alarm for Scale Out / In using the 
    SQS metric ApproximateNumberOfMessagesVisible metric
      NOTE: This will indicate there is a growing number of "unprocessed messages"

- Create Scale Out / In simple scaling policies for Auto Scaling Group 
   using the CloudWatch alarms created

# Test 

Domains provide a way of scoping Amazon SWF resources within your AWS account. All the components of a workflow, such as the workflow type and activity types, must be specified to be in a domain. It is possible to have more than one workflow in a domain; however, workflows in different domains can't interact with each other. Reference: Amazon SWF Domains.
What happens when you create a topic on SNS, an Amazon Resource Name is created.
Increase Visitbility window to allow consumers to process off of SQS

## Security

# Reducing Security Threats

- Use NACLs to filter known bad IP Addrs
    - NACLs operate at layer 4
- Host based firewall i.e. firewalld, iptables, ufw, Windows Firewall

NOTE: Application Load Balancer terminates the bad actor IP addr
  NLB passes traffic directly thru

Web Application Firewall before Application Load Balancer
    - operates at layer 7
    - can block: 
      -  IP Addr
      -  SQL Injection
      -  Cross-site scripting (XSS) attacks
      -  Geomatch to block countries

Can attach WAF to CloudFront


# Key Management Service

 - region secure key management encryption / decryption
 - manages Customer Master Keys (CMK)
    - pointer / reference
    - keys never leave region or KMS
 - ideal for S3 objects, db passwords, API Keys
 - CMKs can encrypt / decrypt data upto 4KB size **
 - Pay per API call
 - Audit capability using CloudTrail, logs delivered to S3
 - FIPS 140-2 Level 2 service
    - US Gov Sec Std used to approve cryptographic modules
 - CloudHSM is Level 3

3 Types of CMKs 

Type                    Can View        Can Manage      Dedicated to my Acct
Cusomter Managed            Yes             Yes             Yes
AWS Managed CMK             Yes             No              Yes
AWS Owned CMK               No              Yes             No


AWS Managed 
 - Free, used by default if using encryption in most services.
    Created automatically when creating an encrypted resource in AWS Service 
    Only that service can use them

Customer Managed CMK 
 - Allows key rotation, controlled via key policies

AWS Owned CMK 
 - Used by AWS on a shared basis across many accounts

Two types of encryption for CMKs:
Create a CMK in KMS by default it is Symmetric

         Symmetric                                       Asymmetric 
- same key encrypt / decrypt                        - mathematically related public / private key pair
- AES256                                            - RSA and elliptic-curve cryptography (ECC) algos 
- Never leaves AWS unencrypted                      - Private key never leaves AWS unencrypted 
- Must call KMS APIs to use CMKs                    - Must call the KMS APIs to use private key
- AWS services integrated w/ KMS use symmetri       - Can download public key and use outside of AWSc
- encrypt, decrypt, re-encrypt dat                  - Used outside of AWS by users who can't call KMS APIsa
- generate data keys, data key pairs                - AWS services integrated with KMS DO NOT SUPPORT asymmetric CMKs,
   random byte string                               - Sign messages and verify signatures
- import own key material




Key Policy for newly created CMK
{
    "Sid": "Enable IAM User Permissions",
    "Effect": "Allow",
    "Principal": {"AWS": "arn:aws:iam::1111122223333:root"},
    "Action": "kms:*",
    "Resource": "*"
}

## Grant AWS account (root user) full access to the CMK

KMS provides a Default Key Policy for you on create of a new CMK
NOTE: if you update Key Policy to remove access from an account, need AWS to reset

example policy 

{
    "Sid": "Allow use of the key",
    "Effect": "Allow",
    "Principal": {"AWS": "arn:aws:iam::1111122223333:role/EncryptionApp"},
    "Action": [
        "kms:DescribeKey",
        "kms:GenerateDataKey*",
        "kms:Encrypt",
        "kms:ReEncrypt",
        "kms:Decrypt",
    ],
    "Resource": "*"
}

## Grants IAM role role access to crypto actions for encrypting and decrypting data

NOTE: KMS is REGIONAL.  If you wanted to move an object in S3 from one region to another, 
 you'd have to:
    - decrypt object 
    - move to new region
    - re-encrypt with CMK in the new region

CLI:

aws kms create-key --description "Test_KMS_CMK"
returns:
{
    "KeyMetadata": {
        "AWSAccountId": "709596356054",
        "KeyId": "180b17b8-0f6b-41ac-a7f9-705ae965675b",
        "Arn": "arn:aws:kms:us-east-1:709596356054:key/180b17b8-0f6b-41ac-a7f9-705ae965675b",
        "CreationDate": "2024-11-22T22:59:37.168000+00:00",
        "Enabled": true,
        "Description": "Test_KMS_CMK",
        "KeyUsage": "ENCRYPT_DECRYPT",
        "KeyState": "Enabled",
        "Origin": "AWS_KMS",
        "KeyManager": "CUSTOMER",
        "CustomerMasterKeySpec": "SYMMETRIC_DEFAULT",
        "KeySpec": "SYMMETRIC_DEFAULT",
        "EncryptionAlgorithms": [
            "SYMMETRIC_DEFAULT"
        ],
        "MultiRegion": false
    }
}




alias == short cut to a key 
can be used to point to different keys using the same name (per rotation)


aws kms create-alias --target-key-id  xxxx-some-long-key-id-yyyyy --alias-name "alias/test_cmk_alias"
> aws kms create-alias --target-key-id  "180b17b8-0f6b-41ac-a7f9-705ae965675b" --alias-name "alias/test_cmk_alias"
        
aws kms list-keys
{
    "Keys": [
        {
            "KeyId": "180b17b8-0f6b-41ac-a7f9-705ae965675b",
            "KeyArn": "arn:aws:kms:us-east-1:709596356054:key/180b17b8-0f6b-41ac-a7f9-705ae965675b"
        }, .......
        {
            "KeyId": "5b1b077a-2eec-4af3-b60e-3bb95cc970bd",
            "KeyArn": "arn:aws:kms:us-east-1:709596356054:key/5b1b077a-2eec-4af3-b60e-3bb95cc970bd"
        }
    ]
}


Default Key Policy created:
{
    "Version": "2012-10-17",
    "Id": "key-default-1",
    "Statement": [
        {
            "Sid": "Enable IAM User Permissions",
            "Effect": "Allow",
            "Principal": {
                "AWS": "arn:aws:iam::709596356054:root"
            },
            "Action": "kms:*",
            "Resource": "*"
        }
    ]
}


Know use the key at the CLI that was created above, use key alias

echo "hellO worlD" > open_secret.txt
## THIS DOESN'T WORK, NEEDS fileb  >>    aws kms encrypt --key-id "alias/test_cmk_alias" --plaintext file://open_secret.txt --output text --query CipherTextBlob
aws kms encrypt --key-id alias/test_cmk_alias --plaintext fileb://open_secret.txt --output text --query CiphertextBlob | base64 --decode   > enc_secret

NOTE: THIS IS OUTPUTS BASE64

# decrypt it, NOTE:  NO CMK IS SPECIFIED, because there is a reference to CMK that encrypted data in encryption !!  **
# THIS DECRYPTS TO BASE64
# 
aws kms decrypt --ciphertext-blob fileb://enc_secret  --output text --query Plaintext 
aGVsbE8gd29ybEQK


# decrypt it, out of base64 
aws kms decrypt --ciphertext-blob fileb://enc_secret  --output text --query Plaintext  | base64 --decode
hellO worlD


- Use  data encryption key to generate data > 4KB   ** 

aws kms generate-data-key  --key-id alias/test_cmk_alias  --key-spec AES_256
{
    "CiphertextBlob": "AQIDAHhvU7QOex6TlgFWtL6s6G5F6hWjooMZKlwaG1UchxveyAGoMhhq3q8InP+sYOiUymJcAAAAfjB8BgkqhkiG9w0BBwagbzBtAgEAMGgGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQM02/NSaaUIJohbJskAgEQgDs4TYB3fXnC0YQ09vUbFtQKwYkW7nJL3Ey4AlSq51i8hU441VxUIkSDx96rK9w9+Itk1owTq/Bq41SL2Q==",
    "Plaintext": "jYTJZJiMFi57RJVyw63cDXtTVeJW8tasCudHJQn+aGw=",
    "KeyId": "arn:aws:kms:us-east-1:709596356054:key/180b17b8-0f6b-41ac-a7f9-705ae965675b"
}
NOTE: 
    - CiphertextBlob has metadata which tells KMS which CMK was used to encrypt data file
    - use Plaintext to encrypt data file (> 4KB) 
        NOTE: store CiphertextBlob and encrypted data
                Encrypted data cannot be decrypted with just CiphertextBlob

Envelope Encyption

Only data key goes over network to decrypt

example 


## Ecnrypt it using data key from KMS
enc_it.sh: 
aws kms encrypt \
--key-id alias/kkio_test_key \
--plaintext fileb://ls_it.txt \
--query CiphertextBlob \
--output text \
| base64 -d > encrypted_ls_it.enc


## Decrypt it using data key from KMS
deEnc_it.sh:
aws kms decrypt \
--ciphertext-blob fileb://encrypted_ls_it.enc \
--query Plaintext \
--output text \
| base64 -d > decrypted_ls_it.txt











# CloudHSM

Cloud Hardware Security Modules

 - dedicated hardware security module 
 - FIPS 140-2 Level 3
     - physical enclosure / tamper detection zeroes out plaintext cryptographic security providers
        when removable doors / covers are opened up

 - KMS == FIPS 140-2 Level 2  (show evidence of tampering)

 - manage own keys in Cloud HSM
    - single tenant multi-AZ cluster
    - dedicated to customer
    - KMS is multi-tenant
    - No access to AWS-managed component
    - AWS does not have access to keys
    - runs within VPC in customer account
    - Industry standard APIs -- NO AWS APIs
    - Keys are irretrievable if lost

CloudHSM can provide platform to handle: 
    - PKCS#11
    - Java Cryptography Extensions (JCE)
    - Microsoft CryptoNG (CNG)

Cloud HSM "projects" ENIs into App VPC 
 - 1 HSM per subnet in each AZ

+------------------------------------+                   +------------------------------------+
|  customer VPC                      |                   |  cloudHSM VPC                      |
|                                    |                   |                                    |
|   +-------------------------------------------------------------------------------------+   |
|   |    +---------------------+     |                   |      +---------------------+   |   |
|   |    |                     |     |                   |      |                     |   |   |
|   |    |  [App]        [ENI]<---------------------------------------------- [HSM]+  |   |   |
|   |    | Subnet 1            |     |                   |      | Subnet 1         |  |   |   |
|   |AZ1 +---------------------+     |                   |      +------------------|--+   |   |
|   +------------------------------------------------------------------------------|------+   |
|                                    |                   |                         |          |
|                                    |                   |                         + cluster  |
|                                    |                   |                         |          |
|   +------------------------------------------------------------------------------|------+   |
|   |    +---------------------+     |                   |      +------------------|--+   |   |
|   |    |                     |     |                   |      |                  |  |   |   |
|   |    |  [App]        [ENI]<---------------------------------------------- [HSM]+  |   |   |
|   |    | Subnet 2            |     |                   |      | Subnet 2            |   |   |
|   |AZ2 +---------------------+     |                   |      +---------------------+   |   |
|   +-------------------------------------------------------------------------------------+   |
|                                    |                   |                                    |
+------------------------------------+                   +------------------------------------+


# Systems Manager Parameter Store

 - component of Systems Manager (SSM)
 - serverless storage for config and secrets
    - passwords
    - database connection strings
    - license codes 
    - API keys

 - values can be encrypted or plain text
 - params can be stored in hierarchies
 - versioning (rollback)
 - TTL for values i.e. passwords

Parameters stored into Hierarchies

            dev                         prod
       +-----+-----+               +-----+-----+
       db         app              db         app
 +-----+---+       +----+        +--+----+     +-----+
mysql    pgsql       apikey    mysql   pgsql       apikey
  |         |                     |        |
conn-str  conn-str             conn-str  conn-str

/prod/db/mysql/*
/dev/api/apikey

can get a single parameter (/dev/api/apikey) or entire branch (/prod/db/*) 

NOTE:  Up to 15 levels deep  **

Can grant permissions at any point in the tree structure i.e.
 DBAs can get /prod/db/*   and dev can get /dev/api/*

GetParametersByPath 
     /dev
     /dev/db

Can be used in CloudFormation 
ex. 

Parameters:
  LatestAmiID:
    Type: 'AWS::SSM::Paramater::Value<AWS::EC2::Image::ID>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Resources:
 Instance: 
    Type: 'AWS::EC2::Instance'
    Properties: 
      ImageID: !Ref LatestAmiID      <<< This references above



# Secrets Manager

- rotate, manage secrets
- similar to parameter store
- parameter has no additional charges
- secrets manager has additional cost:
   - charge per secret stored 
   - per 10k API calls

 - Secrets Manager can automatically rotate secrets 
     - full key rotation with RDS
            - new key / password

 - Lambda can be written to rotate keys in other services 
   - within Secrets Manager console
 
 - Secrets Manager can generate random secrets
    - generate random password in CloudFormation
        - store them in Secrets Manager 

    - aws sdks can do this as well 

 - Can be shared across accounts


# AWS Shield
 - protects against DDoS attacks
 - sits at edge of AWS Netowrk


                AWS Shield Standard                                 AWS Shield Advanced

 - use WAF w/ CloudFront or App LB get                      - $3k per month, per org 
   AWS Shield Std at no cost                                - Enchanced protection for
                                                                - EC2, ELB, ClourFront, GlobalAccelerator, Route 53
 - protection against layer 3 and 4 attacks
    - SYN (tcp) / UDP Floods                                - Business / Enterprise support customers get 24x7 access 
    - reflection attacks                                        to DDoS Response Team (DRT)
                                                            - DDoS cost protection
 - Stopped 2.3 Tbps DDoS attack for 3 days


# Web Application Firewall

- web firewall that monitors HTTP(S) requests to:
   - CloudFront
   - ALB
   - API Gateway

 - control access to content
 - configure filtering rules to allow / deny traiffic:
    - IP Addr
    - Query string Params
    - SQL Query Injection

 - Blocked traffice receives HTTP 403 error / Forbidden

3 Behaviors:
 - Allow all reqs, except specified
 - Deny  all reqs, except specified
 - Count reqs that match properties specified

Request Properties:
    - Originating IP Addr
    - Originating country
    - Request size (put min or max value)
    - Values in request headers
    - Strings in request matching regex patterns
    - SQL code injection
    - Cross-site scripting (XSS) attacks


combine to get a condition like blocking SQL Code Injection on .php requests 
  while allowing .png requests

AWS Firewall Manager (integrated with WAF) 
 - Configuration service, manage firewall rules across AWS Organization

 - Configure WAF Rules: 
    - ALB, API Gateway, CloudFront 

 - AWS Shield Advanced protections: 
    - ALB, ELB Classic, EIP, CloudFront 

 - Enable secruity groups for EC2 and ENIs


## Serverless 

# Lambda

- compute service that allows code upload to create a Lambda function
  - AWS provisions and manages servers that you use to run code
- no server / maintenance / admin
- continuous scaling
- inexpensive

Use cases: 
 - event driven compute service 
    AWS runs Lambda code in response to events 
    i.e. triggers:  changes to dta in a Bucket or DynamoDB

 - compute service to run code in response to HTTP request using API Gateway 
   or API calls via AWS SDK

Lambda can trigger other Lambda functions


Traditional vs. Serverless Architecture


Tradtional: 
 [ User ] -->  [ Route 53 ] --> [ ELB ] --> [ EC2 ] --> [ RDS ]

Serverless (scales automagically): 
 [ User ] -->  [ API Gateway ] --> [ Lambda ] --> [ Aurora ]


Languages Supported: 
  Node.js       Java
  C#            Python
  Go            PowerShell

Pricing: 
 - First 1MM requests are free
    $0.20 per 1MM after

 - Duration
    - nearest 100ms
    - depends on memory allocated 
    - $0.00001667 for every GB-second used

Alexa routes to Lambda

Lambda scales out (not up)
Each Lambda function is independent event,  1 event == 1 separate funciton call
Lambda can call other Lambda functions 

What AWS services are serverless: 
    - Aurora Serverless
    - Lambda
    - DynamoDB
    - S3
    - API Gateway

Difficult to debug Lambda applications 
    - AWS X-Ray allows for debugging Serverless

Lambda do things globally, can back up S3 bucket to S3 bucket

KNOW WHAT CAN TRIGGER LAMBDA
     i.e. RDS can't trigger Lambda


Lambda Lab: Alexa

Lambda Triggers:
- Alexa
- MSK
- Apache Kafka
- API Gateway
- Cloud Formation
- CloudWatch Logs
- CodeCommit
- CodePipeline
- Cognito
- Config
- Connect
- Dynamo DB
- EFS
- ELB / ALB
- Event Bridge (CloudWatch Event) 
- AWS IoT
- Kinesis
- S3
- SNS
- SQS


# Serverless Application Model

- CloudFormation extension optimized for serverless applications 
- new resource types: functions, APIs, tables
- SAM is a superset of CloudFormation 
- run serverless applications locally using docker
- package and deploy using CodeDeploy

NOTE:  SAM template creates :
   - Lambda function from local code 
   - API Gateway endpoint
   - mappings and permissions

cli> sam ini


Sample SAM Template (template.yaml):

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-app

  Sample SAM Template for sam-app

Globals:
  Function:
    Timeout: 3

Resource: 
  HelloWorldFunction:
    Type: AWS::Serverless::Function
      Properties:
        CodeURI: hellow_world/
        Handler: app.lambda_handler
        Runtime: python3.7
        Events: 
          HelloWorld: 
            Type: Api
            Properties:
              Path: /hello
              Method: get

Outputs:

 HellowWorldApi:
   Description: "API Gateway endpoint URL for Prod state for Hello World function"
   Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Resgion}.amazonaws.com/Prod/hello/"
 HellowWorldFucntion:
   Descritpion: "Hello World Lambda Function ARN"
   Value: !GetAtt HelloWorldFunction.Arn
 HellowWorldFucntionIamRole:
   Descritpion: "Implicit IAM Role created for Hello WOrld function"
   Value: !GetAtt HelloWorldFunctionRole.Arn


NOTE: the app.py will have a third party requirement (requests)

# to build serverless app
sam build 

# to deploy
sam deploy --guided 

output
## NOTE: creates sam-cli IAM role and s3 bucket (where deployment is staged)
##       arguments writtent to samconfig.toml

Resources created: 
AWS::Lambda::Permission
AWS::IAM::Role
AWS::Lambda::Function
AWS::ApiGateway::Deployment
AWS::ApiGateway::Stage
AWS::ApiGateway::RestApi

# Elastic Container Service (ECS)

- managed container orchestration service 
- create clusters to manage fleets of container deployments
   - manages EC2 or Fargate instances

- schedules containers for optimal placement
- define rules for CPU and memory requirements
- monitor resource utilization
- deploy, update, rollback

ECS is free, EC2 / Fargate usage is paid for

- integrates with VPC, sec grp, EBS volumes, ELB
- integrates with CloudTrail, CloudWatch


ECS Components:

cluster: logical collection of ECS resources (EC2, Fargate instances)

task definition: defines application. Similar to Dockerfile but for containers on ECS
        - can contain multiple containers

container definition: inside a task definition, defines individual containers a task uses.
        - controls CPU, memory allocation and port mappings

task: single running copy of any containers defined by a task definition 
        - i.e. one working copy of application

service: allows task definitions to be scaled by adding tasks.  Defines min / max values

registry: storage for container images (Elastic Container Registry / Docker Hub)


Fargate:
 - Serverless container enginer
 - Works with ECS and EKS
 - don't have to provision / manage servers
 - only pay for what is needed to run containers
 - each workoad runs in it's own kernel 
   - work isolation and security

When to choose EC2 over Fargate:
 - Compliance requirements (need certain OS version or bespoke image)
 - Require broader customization
 - Require GPUs


Elastic Kubernetes Service (EKS)
 - K8s open source software that lets you deploy / manage containerized apps
 - same toolset on prem and in cloud
 - containsers grouped into pods
 - supports EC2 and Fargate models

Whey use EKS 
 - already using EKS
 - migrating to AWS


Elastic Container Registry (ECR)
 - managed docker container registry
 - store, manage, deploy images
 - integrated with ECS and EKS
 - works with on-prem deployments
 - highly available 
 - integrated with IAM
 - pay for storage and data transfer

ECS can use ELB to distribute traffic across tasks in service
 - supports ALB, NLB, CLB (Classic)
     - ALB HTTP / HTTPS layer 7 traffic)
     - NLB or CLB route TCP (layer 4 traffic)

ALB allows:
  - Containers to user dynamic host port mapping   
    - multiple tasks from same service are allowed per container instance

  - Path-based routing
  - Priority Rules
    Multiple services to use the same listener port on single ALB

ALB recommended over NLB / CLB

ECS Security

Intance Roles vs. Task Roles

EC2 Instance Role is applied to all tasks running in that EC2 instance

Task Roles allow for finer granularity of permissions of tasks
 - policy on a per task basis
     i.e. 
       Task Role A: s3 only
       Task Role B: s3  + Dynamo DB 
       Task Role C: Dynamo DB 

+---------------------+
| cluster             |
| +-----------------+ |
| | service         | |
| | +-------------+ | |
| | | task        | | |
| | | +---------+ | | |
| | | |container| | | |
| | | |         | | | |
| | | +---------+ | | |
| | +-------------+ | |
| +-----------------+ |
+---------------------+

network mode: awsvpc (CNI, container network interface )

Fargate creates the following resources:
ECS 
  - cluster
  - task defintion
  - service
AWS 
  - log group
  - CloudFormation stack
  - VPC
  - subnet 1
  - subnet 2
  - security group


# Serverless Summary

cloud 1.0:   ELB  -> EC2 -> RDS

cloud 2.0:   API Gateway  -> Lambda  -> DynamoDB / Aurora

Lambda scale out
 - functions are independent

Lambda can trigger other functions
X-Ray allows to debug serverless apps 

Lambda can execute globally


.